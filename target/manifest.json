{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.0rc1", "generated_at": "2021-07-08T15:55:45.715585Z", "invocation_id": "1ce81d87-b0c1-45fa-aba0-a47ba6a5fbb6", "env": {}, "project_id": "faebc42304447d4427374f806679ecb5", "user_id": "00e49692-ad76-4424-bcab-9cd4ad85d0eb", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.my_new_project.musicals_info": {"raw_sql": "{{ config(materialized='table') }}\r\n\r\nselect e.eventname , e.starttime\r\nfrom dev.public.event e inner join dev.public.category c\r\non e.catid = c.catid\r\nwhere c.catname='Musicals'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["my_new_project", "create_simple", "musicals_info"], "unique_id": "model.my_new_project.musicals_info", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "create_simple\\musicals_info.sql", "original_file_path": "models\\create_simple\\musicals_info.sql", "name": "musicals_info", "alias": "musicals_info", "checksum": {"name": "sha256", "checksum": "7fdad3ee4111d3abe5fd1c92c02836f30417bdfb044bec6df99877e8ab9c7302"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\my_new_project\\models\\create_simple\\musicals_info.sql", "build_path": "target\\run\\my_new_project\\models\\create_simple\\musicals_info.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1625759747, "compiled_sql": "\n\nselect e.eventname , e.starttime\nfrom dev.public.event e inner join dev.public.category c\non e.catid = c.catid\nwhere c.catname='Musicals'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"public\".\"musicals_info\""}, "model.my_new_project.my_first_dbt_model": {"raw_sql": "/*\r\n    Welcome to your first dbt model!\r\n    Did you know that you can also configure models directly within SQL files?\r\n    This will override configurations stated in dbt_project.yml\r\n\r\n    Try changing \"table\" to \"view\" below\r\n*/\r\n\r\n{{ config(materialized='table') }}\r\n\r\nwith source_data as (\r\n\r\n    select 1 as id\r\n    union all\r\n    select null as id\r\n\r\n)\r\n\r\nselect *\r\nfrom source_data\r\n\r\n/*\r\n    Uncomment the line below to remove records with null `id` values\r\n*/\r\n\r\n-- where id is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["my_new_project", "example", "my_first_dbt_model"], "unique_id": "model.my_new_project.my_first_dbt_model", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "example\\my_first_dbt_model.sql", "original_file_path": "models\\example\\my_first_dbt_model.sql", "name": "my_first_dbt_model", "alias": "my_first_dbt_model", "checksum": {"name": "sha256", "checksum": "15579d5a1617e63faeb848841479ac49d3ef3addbd2783845fe7b39b8f07d50c"}, "tags": [], "refs": [], "sources": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "my_new_project://models\\example\\schema.yml", "compiled_path": "target\\compiled\\my_new_project\\models\\example\\my_first_dbt_model.sql", "build_path": "target\\run\\my_new_project\\models\\example\\my_first_dbt_model.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1625759747, "compiled_sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"public\".\"my_first_dbt_model\""}, "model.my_new_project.my_second_dbt_model": {"raw_sql": "-- Use the `ref` function to select from other models\r\n\r\nselect *\r\nfrom {{ ref('my_first_dbt_model') }}\r\nwhere id = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.my_new_project.my_first_dbt_model"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["my_new_project", "example", "my_second_dbt_model"], "unique_id": "model.my_new_project.my_second_dbt_model", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "example\\my_second_dbt_model.sql", "original_file_path": "models\\example\\my_second_dbt_model.sql", "name": "my_second_dbt_model", "alias": "my_second_dbt_model", "checksum": {"name": "sha256", "checksum": "5991c318f711e0315ca534919938c772207dd4f6fa36113e3d804e1af14cc099"}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "my_new_project://models\\example\\schema.yml", "compiled_path": "target\\compiled\\my_new_project\\models\\example\\my_second_dbt_model.sql", "build_path": "target\\run\\my_new_project\\models\\example\\my_second_dbt_model.sql", "deferred": false, "unrendered_config": {}, "created_at": 1625759747, "compiled_sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom \"dev\".\"public\".\"my_first_dbt_model\"\nwhere id = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"public\".\"my_second_dbt_model\""}, "model.redshift.pg_attribute": {"raw_sql": "select\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_attribute", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_attribute"], "unique_id": "model.redshift.pg_attribute", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_attribute.sql", "original_file_path": "models\\base\\pg_attribute.sql", "name": "pg_attribute", "alias": "pg_attribute", "checksum": {"name": "sha256", "checksum": "00dfbe1e89b8fd3363a802e48965ad1dc5be4aa57c9e53b2429927c195144c37"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_attribute.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_attribute", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_class": {"raw_sql": "select\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_class", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_class"], "unique_id": "model.redshift.pg_class", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_class.sql", "original_file_path": "models\\base\\pg_class.sql", "name": "pg_class", "alias": "pg_class", "checksum": {"name": "sha256", "checksum": "ea30dfda420def0e4a187d376507118a0f586dcb6ff9664d482ee51f81e5676e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_class.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_class", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_depend": {"raw_sql": "select\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_depend", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_depend"], "unique_id": "model.redshift.pg_depend", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_depend.sql", "original_file_path": "models\\base\\pg_depend.sql", "name": "pg_depend", "alias": "pg_depend", "checksum": {"name": "sha256", "checksum": "97a24ea3419774df6c29643ab91538bf4a8cce680d7d454a492517c6fe817081"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_depend.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_depend", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_namespace": {"raw_sql": "select\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_namespace", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_namespace"], "unique_id": "model.redshift.pg_namespace", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_namespace.sql", "original_file_path": "models\\base\\pg_namespace.sql", "name": "pg_namespace", "alias": "pg_namespace", "checksum": {"name": "sha256", "checksum": "5b2238042a0c22a013f91e24455bcdacdcb2b532c71e10d65210041c78ea5f3d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_namespace.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_namespace", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_tables": {"raw_sql": "select\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_tables", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_tables"], "unique_id": "model.redshift.pg_tables", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_tables.sql", "original_file_path": "models\\base\\pg_tables.sql", "name": "pg_tables", "alias": "pg_tables", "checksum": {"name": "sha256", "checksum": "f28222e571f8f5d904b31eaeabe26f5b5efced16707b6774e1602a66fb8e4e47"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_tables", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_user": {"raw_sql": "select\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_user"], "unique_id": "model.redshift.pg_user", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_user.sql", "original_file_path": "models\\base\\pg_user.sql", "name": "pg_user", "alias": "pg_user", "checksum": {"name": "sha256", "checksum": "c082dad9fc3061a800219720837739e2acc29b4bfd30e3c34526bf3208f0ee9a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_views": {"raw_sql": "select\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_views", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "pg_views"], "unique_id": "model.redshift.pg_views", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\pg_views.sql", "original_file_path": "models\\base\\pg_views.sql", "name": "pg_views", "alias": "pg_views", "checksum": {"name": "sha256", "checksum": "634398275b6d86c658ed66fce990c64196e9c007e02b47e3c24724dda8956499"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\pg_views.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_views", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_cost": {"raw_sql": "with stl_explain as (\n\n  select query_id, plannode from {{ref('stl_explain')}}\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.stl_explain"]}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "redshift_cost"], "unique_id": "model.redshift.redshift_cost", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\redshift_cost.sql", "original_file_path": "models\\base\\redshift_cost.sql", "name": "redshift_cost", "alias": "redshift_cost", "checksum": {"name": "sha256", "checksum": "9828e9a6ce80a8c8c59d5acfa10a31895f7404f5876f9891de83a53523639767"}, "tags": [], "refs": [["stl_explain"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\redshift_cost.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "with  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom stl_explain\n),stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stl_explain", "sql": " __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom stl_explain\n)"}], "relation_name": null}, "model.redshift.stl_explain": {"raw_sql": "select\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom stl_explain", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "stl_explain"], "unique_id": "model.redshift.stl_explain", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\stl_explain.sql", "original_file_path": "models\\base\\stl_explain.sql", "name": "stl_explain", "alias": "stl_explain", "checksum": {"name": "sha256", "checksum": "4ad1b98230d2c9901e6e26c4e23cc54478fa094a3dfc818c9f0d6bbc99db6424"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\stl_explain.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom stl_explain", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stl_query": {"raw_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom stl_query", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "stl_query"], "unique_id": "model.redshift.stl_query", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\stl_query.sql", "original_file_path": "models\\base\\stl_query.sql", "name": "stl_query", "alias": "stl_query", "checksum": {"name": "sha256", "checksum": "0a38c8f342da81aacbe45038a4b04ca5f554ceeeac8a2ed16032939421b10db3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\stl_query.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom stl_query", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stl_wlm_query": {"raw_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom stl_wlm_query", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "stl_wlm_query"], "unique_id": "model.redshift.stl_wlm_query", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\stl_wlm_query.sql", "original_file_path": "models\\base\\stl_wlm_query.sql", "name": "stl_wlm_query", "alias": "stl_wlm_query", "checksum": {"name": "sha256", "checksum": "288e4bec80b38ae3c626a0274d48dbec520eced96789e789f3dbaf9aba50dc04"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\stl_wlm_query.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom stl_wlm_query", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stv_blocklist": {"raw_sql": "select\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom stv_blocklist", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "stv_blocklist"], "unique_id": "model.redshift.stv_blocklist", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\stv_blocklist.sql", "original_file_path": "models\\base\\stv_blocklist.sql", "name": "stv_blocklist", "alias": "stv_blocklist", "checksum": {"name": "sha256", "checksum": "b75a4ff091c2bd41f03f66e6d32b6e00ab4da8ce77fb5ee1adfbb31f617a90ea"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\stv_blocklist.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom stv_blocklist", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stv_tbl_perm": {"raw_sql": "select\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom stv_tbl_perm", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "stv_tbl_perm"], "unique_id": "model.redshift.stv_tbl_perm", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\stv_tbl_perm.sql", "original_file_path": "models\\base\\stv_tbl_perm.sql", "name": "stv_tbl_perm", "alias": "stv_tbl_perm", "checksum": {"name": "sha256", "checksum": "18a7acdbeb763b3a0aca48feb625ccffcf75b7463180497731508bd22350bf05"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\stv_tbl_perm.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom stv_tbl_perm", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.svv_diskusage": {"raw_sql": "select\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom svv_diskusage", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "base", "svv_diskusage"], "unique_id": "model.redshift.svv_diskusage", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "base\\svv_diskusage.sql", "original_file_path": "models\\base\\svv_diskusage.sql", "name": "svv_diskusage", "alias": "svv_diskusage", "checksum": {"name": "sha256", "checksum": "4274ed7f089818526dbbd7968f5200f53eb70a3f2e1d7954a58c20b7de4c5df8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\base\\svv_diskusage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "select\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom svv_diskusage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_columns": {"raw_sql": "{{ redshift.fetch_column_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_column_data_sql"], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "introspection", "redshift_columns"], "unique_id": "model.redshift.redshift_columns", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "introspection\\redshift_columns.sql", "original_file_path": "models\\introspection\\redshift_columns.sql", "name": "redshift_columns", "alias": "redshift_columns", "checksum": {"name": "sha256", "checksum": "f18c67ba5ea2c91f122b905dfdd31df5c4ae1970d0dcc1e51d9365462298d10c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\introspection\\redshift_columns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "\n\n    with columns as (\n        select\n            n.nspname as schemaname,\n            c.relname as tablename,\n            a.attnum as col_index,\n            a.attname as col_name,\n            d.description,\n\n            case\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING', 'VARCHAR')\n\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER', 'CHAR')\n\n                else upper(format_type(a.atttypid, a.atttypmod))\n            end as col_datatype,\n\n            case\n                when format_encoding((a.attencodingtype)::integer) = 'none' then 'raw'\n                else format_encoding((a.attencodingtype)::integer)\n            end as col_encoding,\n\n            case\n                when a.atthasdef is true then adef.adsrc\n                else null\n            end as col_default,\n\n            a.attnotnull as col_not_null\n\n        from pg_namespace as n\n        inner join pg_class as c on n.oid = c.relnamespace\n        inner join pg_attribute as a on c.oid = a.attrelid\n        left outer join pg_description as d ON (d.objoid = a.attrelid AND d.objsubid = a.attnum)\n        left outer join pg_attrdef as adef on a.attrelid = adef.adrelid and a.attnum = adef.adnum\n        where c.relkind = 'r'\n          and a.attnum > 0\n\n    )\n    select *\n    from columns\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_constraints": {"raw_sql": "{{ redshift.fetch_constraint_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_constraint_data_sql"], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "introspection", "redshift_constraints"], "unique_id": "model.redshift.redshift_constraints", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "introspection\\redshift_constraints.sql", "original_file_path": "models\\introspection\\redshift_constraints.sql", "name": "redshift_constraints", "alias": "redshift_constraints", "checksum": {"name": "sha256", "checksum": "ebbdac8bcd47696be306290c83330b2e934fe8de401168fd8b69d6c996444924"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\introspection\\redshift_constraints.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "\n\n    select\n        c.nspname as schemaname,\n        b.relname as tablename,\n        case\n            when a.contype = 'p' then 'primary key'\n            when a.contype = 'u' then 'unique'\n            when a.contype = 'f' then 'foreign key'\n            else null\n        end as constraint_type,\n        pg_get_constraintdef(a.oid) as col_constraint\n\n    from pg_catalog.pg_constraint a\n    join pg_catalog.pg_class b on(a.conrelid=b.oid)\n    join pg_catalog.pg_namespace c on(a.connamespace=c.oid)\n    where a.contype in ('p', 'u', 'f')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_sort_dist_keys": {"raw_sql": "{{ redshift.fetch_sort_dist_key_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_sort_dist_key_data_sql"], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "introspection", "redshift_sort_dist_keys"], "unique_id": "model.redshift.redshift_sort_dist_keys", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "introspection\\redshift_sort_dist_keys.sql", "original_file_path": "models\\introspection\\redshift_sort_dist_keys.sql", "name": "redshift_sort_dist_keys", "alias": "redshift_sort_dist_keys", "checksum": {"name": "sha256", "checksum": "ce3d51c03cd59a2d56a22b846222abcd7d44878116a5e46aa800e59a44c50973"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\introspection\\redshift_sort_dist_keys.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "\n\n    with dist_config as (\n\n        -- gets distyle and distkey (if there is one)\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n\n            case\n                when c.reldiststyle = 0 then 'even'\n                when c.reldiststyle = 1 then 'key'\n                when c.reldiststyle = 8 then 'all'\n                else null\n            end as diststyle,\n\n            max(case when c.reldiststyle = 1 and a.attisdistkey IS TRUE and a.attnum > 0 then a.attname else null end) over (partition by n.nspname, c.relname) as dist_key\n\n        from pg_namespace as n\n        inner join pg_class as c on n.oid = c.relnamespace\n        inner join pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n\n    ),\n\n    sort_config as (\n\n        -- get sortstyle and sortkeys\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n            case\n                when min(a.attsortkeyord) over (partition by n.nspname, c.relname) = -1 then 'interleaved'\n                else 'compound'\n            end as sort_style,\n            listagg(a.attname, '|') within group (order by a.attsortkeyord) over (partition by n.nspname, c.relname) as sort_keys\n\n        from  pg_namespace as n\n        inner join pg_class as c on n.oid = c.relnamespace\n        inner join pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n          and abs(a.attsortkeyord) > 0\n          and a.attnum > 0\n    )\n\n    select *\n    from sort_config\n    join dist_config using (schemaname, tablename)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_tables": {"raw_sql": "{{ redshift.fetch_table_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_table_data_sql"], "nodes": []}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "introspection", "redshift_tables"], "unique_id": "model.redshift.redshift_tables", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "introspection\\redshift_tables.sql", "original_file_path": "models\\introspection\\redshift_tables.sql", "name": "redshift_tables", "alias": "redshift_tables", "checksum": {"name": "sha256", "checksum": "b66f9a5a131ed61ecc528d32098fc6e21e5e4406e7804e37ad24256afdc27c2d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\introspection\\redshift_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1625759747, "compiled_sql": "\n\n    select\n        n.nspname AS schemaname,\n        c.relname AS tablename,\n        d.description,\n        case\n            when c.relkind = 'v' then 'view'\n            when c.relkind = 'r' then 'table'\n            else null\n        end as relation_type\n\n    from pg_catalog.pg_namespace n\n    join pg_catalog.pg_class c on n.oid = c.relnamespace\n    left outer join pg_description d ON (d.objoid = c.oid AND d.objsubid = 0)\n\n    where schemaname not like 'pg_%'\n      and schemaname != 'information_schema'\n      and relkind in ('v', 'r')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_admin_dependencies": {"raw_sql": "{# SOURCE: https://github.com/awslabs/amazon-redshift-utils/blob/master/src/AdminViews/v_view_dependency.sql #}\n\nselect distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  {{ ref('pg_class') }} as srcobj\n  join {{ ref('pg_depend') }} as srcdep on srcobj.oid = srcdep.refobjid\n  join {{ ref('pg_depend') }} as tgtdep on srcdep.objid = tgtdep.objid\n  join {{ ref('pg_class') }} as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join {{ ref('pg_namespace') }} as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join {{ ref('pg_namespace') }} tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.redshift.pg_class", "model.redshift.pg_depend", "model.redshift.pg_depend", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.pg_namespace"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "views", "redshift_admin_dependencies"], "unique_id": "model.redshift.redshift_admin_dependencies", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "views\\redshift_admin_dependencies.sql", "original_file_path": "models\\views\\redshift_admin_dependencies.sql", "name": "redshift_admin_dependencies", "alias": "redshift_admin_dependencies", "checksum": {"name": "sha256", "checksum": "a3117e2ff0f093b77cef2f1c07afbfecf2dd5134bd8701d83f23a66349b4c521"}, "tags": [], "refs": [["pg_class"], ["pg_depend"], ["pg_depend"], ["pg_class"], ["pg_namespace"], ["pg_namespace"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\views\\redshift_admin_dependencies.sql", "build_path": "target\\run\\redshift\\models\\views\\redshift_admin_dependencies.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1625759747, "compiled_sql": "\n\nwith __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_class\n),  __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_depend\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_namespace\n)select distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  __dbt__cte__pg_class as srcobj\n  join __dbt__cte__pg_depend as srcdep on srcobj.oid = srcdep.refobjid\n  join __dbt__cte__pg_depend as tgtdep on srcdep.objid = tgtdep.objid\n  join __dbt__cte__pg_class as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join __dbt__cte__pg_namespace as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join __dbt__cte__pg_namespace tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_class", "sql": " __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_class\n)"}, {"id": "model.redshift.pg_depend", "sql": " __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_depend\n)"}, {"id": "model.redshift.pg_namespace", "sql": " __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_namespace\n)"}], "relation_name": "\"dev\".\"public\".\"redshift_admin_dependencies\""}, "model.redshift.redshift_admin_queries": {"raw_sql": "with queries as (\n\n  select * from {{ref('stl_query')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n\n), cost as (\n\n  select * from {{ref('redshift_cost')}}\n\n), timings as (\n\n  select * from {{ref('stl_wlm_query')}}\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.redshift.stl_query", "model.redshift.pg_user", "model.redshift.redshift_cost", "model.redshift.stl_wlm_query"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "views", "redshift_admin_queries"], "unique_id": "model.redshift.redshift_admin_queries", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "views\\redshift_admin_queries.sql", "original_file_path": "models\\views\\redshift_admin_queries.sql", "name": "redshift_admin_queries", "alias": "redshift_admin_queries", "checksum": {"name": "sha256", "checksum": "c8069e43e51f35bcc6fe948afb4c31aace859e2787b7a7ba88bdb118b24f4ce7"}, "tags": [], "refs": [["stl_query"], ["pg_user"], ["redshift_cost"], ["stl_wlm_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\views\\redshift_admin_queries.sql", "build_path": "target\\run\\redshift\\models\\views\\redshift_admin_queries.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1625759747, "compiled_sql": "with  __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom stl_query\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user\n),  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom stl_explain\n),  __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n),  __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom stl_wlm_query\n),queries as (\n\n  select * from __dbt__cte__stl_query\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), cost as (\n\n  select * from __dbt__cte__redshift_cost\n\n), timings as (\n\n  select * from __dbt__cte__stl_wlm_query\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stl_query", "sql": " __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom stl_query\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user\n)"}, {"id": "model.redshift.stl_explain", "sql": " __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom stl_explain\n)"}, {"id": "model.redshift.redshift_cost", "sql": " __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n)"}, {"id": "model.redshift.stl_wlm_query", "sql": " __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom stl_wlm_query\n)"}], "relation_name": "\"dev\".\"public\".\"redshift_admin_queries\""}, "model.redshift.redshift_admin_table_stats": {"raw_sql": "with unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from {{ref('stv_tbl_perm')}}\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from {{ref('pg_class')}}\n\n), pg_namespace as (\n\n  select * from {{ref('pg_namespace')}}\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from {{ref('stv_blocklist')}}\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from {{ref('pg_attribute')}}\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from {{ref('svv_diskusage')}}\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from\n  stv_partitions\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, {{percentage('unsorted_by_table.unsorted_rows',\n               'unsorted_by_table.rows')}}\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, {{decode_reldiststyle('pg_class.reldiststyle',\n                        'table_attributes.dist_key')}} as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, {{percentage('table_sizes.size_in_megabytes',\n               'capacity.total_megabytes')}}\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\ninner join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\ninner join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\ninner join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\ninner join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\ninner join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.percentage", "macro.redshift.decode_reldiststyle", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.redshift.stv_tbl_perm", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.stv_blocklist", "model.redshift.pg_attribute", "model.redshift.svv_diskusage"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "views", "redshift_admin_table_stats"], "unique_id": "model.redshift.redshift_admin_table_stats", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "views\\redshift_admin_table_stats.sql", "original_file_path": "models\\views\\redshift_admin_table_stats.sql", "name": "redshift_admin_table_stats", "alias": "redshift_admin_table_stats", "checksum": {"name": "sha256", "checksum": "1e0e4ab04e1bf0943776079269240433d07199c74051cec8dba441eaccf98e50"}, "tags": [], "refs": [["stv_tbl_perm"], ["pg_class"], ["pg_namespace"], ["stv_blocklist"], ["pg_attribute"], ["svv_diskusage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\views\\redshift_admin_table_stats.sql", "build_path": "target\\run\\redshift\\models\\views\\redshift_admin_table_stats.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1625759747, "compiled_sql": "with  __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom stv_tbl_perm\n),  __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_class\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_namespace\n),  __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom stv_blocklist\n),  __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_attribute\n),  __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom svv_diskusage\n),unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from __dbt__cte__stv_tbl_perm\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from __dbt__cte__pg_class\n\n), pg_namespace as (\n\n  select * from __dbt__cte__pg_namespace\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from __dbt__cte__stv_blocklist\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from __dbt__cte__pg_attribute\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from __dbt__cte__svv_diskusage\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from\n  stv_partitions\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, (case unsorted_by_table.rows\n        when 0 then 0\n        else (unsorted_by_table.unsorted_rows::float / unsorted_by_table.rows::float) * 100.0 end)\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, decode(pg_class.reldiststyle, 0, 'even',\n                              1, table_attributes.dist_key,\n                              'all') as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, (case capacity.total_megabytes\n        when 0 then 0\n        else (table_sizes.size_in_megabytes::float / capacity.total_megabytes::float) * 100.0 end)\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\ninner join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\ninner join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\ninner join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\ninner join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\ninner join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stv_tbl_perm", "sql": " __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom stv_tbl_perm\n)"}, {"id": "model.redshift.pg_class", "sql": " __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_class\n)"}, {"id": "model.redshift.pg_namespace", "sql": " __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_namespace\n)"}, {"id": "model.redshift.stv_blocklist", "sql": " __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom stv_blocklist\n)"}, {"id": "model.redshift.pg_attribute", "sql": " __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_attribute\n)"}, {"id": "model.redshift.svv_diskusage", "sql": " __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom svv_diskusage\n)"}], "relation_name": "\"dev\".\"public\".\"redshift_admin_table_stats\""}, "model.redshift.redshift_admin_users_schema_privileges": {"raw_sql": "with tables as (\n\n  select * from {{ref('pg_tables')}}\n\n), views as (\n\n  select * from {{ref('pg_views')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.redshift.pg_tables", "model.redshift.pg_views", "model.redshift.pg_user"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "views", "redshift_admin_users_schema_privileges"], "unique_id": "model.redshift.redshift_admin_users_schema_privileges", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "views\\redshift_admin_users_schema_privileges.sql", "original_file_path": "models\\views\\redshift_admin_users_schema_privileges.sql", "name": "redshift_admin_users_schema_privileges", "alias": "redshift_admin_users_schema_privileges", "checksum": {"name": "sha256", "checksum": "afdfa16e7d05ab0196532631e0f6f4c95394938ce26317fd24617b320ff1999d"}, "tags": [], "refs": [["pg_tables"], ["pg_views"], ["pg_user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\views\\redshift_admin_users_schema_privileges.sql", "build_path": "target\\run\\redshift\\models\\views\\redshift_admin_users_schema_privileges.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1625759747, "compiled_sql": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user\n),tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_tables", "sql": " __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_tables\n)"}, {"id": "model.redshift.pg_views", "sql": " __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_views\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user\n)"}], "relation_name": "\"dev\".\"public\".\"redshift_admin_users_schema_privileges\""}, "model.redshift.redshift_admin_users_table_view_privileges": {"raw_sql": "with tables as (\n\n  select * from {{ref('pg_tables')}}\n\n), views as (\n\n  select * from {{ref('pg_views')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.redshift.pg_tables", "model.redshift.pg_views", "model.redshift.pg_user"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public", "fqn": ["redshift", "views", "redshift_admin_users_table_view_privileges"], "unique_id": "model.redshift.redshift_admin_users_table_view_privileges", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "views\\redshift_admin_users_table_view_privileges.sql", "original_file_path": "models\\views\\redshift_admin_users_table_view_privileges.sql", "name": "redshift_admin_users_table_view_privileges", "alias": "redshift_admin_users_table_view_privileges", "checksum": {"name": "sha256", "checksum": "b54435515d07898ca5d517fcb24ccbc03c92a55f470059c947d36979461a655a"}, "tags": [], "refs": [["pg_tables"], ["pg_views"], ["pg_user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\redshift\\models\\views\\redshift_admin_users_table_view_privileges.sql", "build_path": "target\\run\\redshift\\models\\views\\redshift_admin_users_table_view_privileges.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1625759747, "compiled_sql": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user\n),tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_tables", "sql": " __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_tables\n)"}, {"id": "model.redshift.pg_views", "sql": " __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_views\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_user\n)"}], "relation_name": "\"dev\".\"public\".\"redshift_admin_users_table_view_privileges\""}, "test.my_new_project.unique_my_first_dbt_model_id.5ef3c774bb": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('my_first_dbt_model') }} where {{config.get('where')}}) my_first_dbt_model{% else %}{{ ref('my_first_dbt_model') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.my_new_project.my_first_dbt_model"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public_dbt_test__audit", "fqn": ["my_new_project", "schema_test", "unique_my_first_dbt_model_id"], "unique_id": "test.my_new_project.unique_my_first_dbt_model_id.5ef3c774bb", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "schema_test\\unique_my_first_dbt_model_id.sql", "original_file_path": "models\\example\\schema.yml", "name": "unique_my_first_dbt_model_id", "alias": "unique_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["my_first_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1625759747, "column_name": "id"}, "test.my_new_project.not_null_my_first_dbt_model_id.f479667b44": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('my_first_dbt_model') }} where {{config.get('where')}}) my_first_dbt_model{% else %}{{ ref('my_first_dbt_model') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.my_new_project.my_first_dbt_model"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public_dbt_test__audit", "fqn": ["my_new_project", "schema_test", "not_null_my_first_dbt_model_id"], "unique_id": "test.my_new_project.not_null_my_first_dbt_model_id.f479667b44", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "schema_test\\not_null_my_first_dbt_model_id.sql", "original_file_path": "models\\example\\schema.yml", "name": "not_null_my_first_dbt_model_id", "alias": "not_null_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["my_first_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1625759747, "column_name": "id"}, "test.my_new_project.unique_my_second_dbt_model_id.bc96125570": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('my_second_dbt_model') }} where {{config.get('where')}}) my_second_dbt_model{% else %}{{ ref('my_second_dbt_model') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.my_new_project.my_second_dbt_model"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public_dbt_test__audit", "fqn": ["my_new_project", "schema_test", "unique_my_second_dbt_model_id"], "unique_id": "test.my_new_project.unique_my_second_dbt_model_id.bc96125570", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "schema_test\\unique_my_second_dbt_model_id.sql", "original_file_path": "models\\example\\schema.yml", "name": "unique_my_second_dbt_model_id", "alias": "unique_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["my_second_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1625759747, "column_name": "id"}, "test.my_new_project.not_null_my_second_dbt_model_id.dc1d13aa6d": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('my_second_dbt_model') }} where {{config.get('where')}}) my_second_dbt_model{% else %}{{ ref('my_second_dbt_model') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.my_new_project.my_second_dbt_model"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "public_dbt_test__audit", "fqn": ["my_new_project", "schema_test", "not_null_my_second_dbt_model_id"], "unique_id": "test.my_new_project.not_null_my_second_dbt_model_id.dc1d13aa6d", "package_name": "my_new_project", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo", "path": "schema_test\\not_null_my_second_dbt_model_id.sql", "original_file_path": "models\\example\\schema.yml", "name": "not_null_my_second_dbt_model_id", "alias": "not_null_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["my_second_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1625759747, "column_name": "id"}}, "sources": {}, "macros": {"macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\r\n  {%- if dist is not none -%}\r\n      {%- set dist = dist.strip().lower() -%}\r\n\r\n      {%- if dist in ['all', 'even'] -%}\r\n        diststyle {{ dist }}\r\n      {%- elif dist == \"auto\" -%}\r\n      {%- else -%}\r\n        diststyle key distkey ({{ dist }})\r\n      {%- endif -%}\r\n\r\n  {%- endif -%}\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\r\n  {%- if sort is not none %}\r\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\r\n      {%- if sort is string -%}\r\n        {%- set sort = [sort] -%}\r\n      {%- endif -%}\r\n      {%- for item in sort -%}\r\n        {{ item }}\r\n        {%- if not loop.last -%},{%- endif -%}\r\n      {%- endfor -%}\r\n      )\r\n  {%- endif %}\r\n{%- endmacro -%}\r\n\r\n\r\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\r\n\r\n  {%- set _dist = config.get('dist') -%}\r\n  {%- set _sort_type = config.get(\r\n          'sort_type',\r\n          validator=validation.any['compound', 'interleaved']) -%}\r\n  {%- set _sort = config.get(\r\n          'sort',\r\n          validator=validation.any[list, basestring]) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary -%}temporary{%- endif %} table\r\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\r\n    {{ dist(_dist) }}\r\n    {{ sort(_sort_type, _sort) }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\r\n  {%- set binding = config.get('bind', default=True) -%}\r\n\r\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create view {{ relation }} as (\r\n    {{ sql }}\r\n  ) {{ bind_qualifier }};\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\r\n  {{ postgres__create_schema(relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\r\n  {{ postgres__drop_schema(relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\r\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\r\n      with bound_views as (\r\n        select\r\n          ordinal_position,\r\n          table_schema,\r\n          column_name,\r\n          data_type,\r\n          character_maximum_length,\r\n          numeric_precision,\r\n          numeric_scale\r\n\r\n        from information_schema.\"columns\"\r\n        where table_name = '{{ relation.identifier }}'\r\n    ),\r\n\r\n    unbound_views as (\r\n      select\r\n        ordinal_position,\r\n        view_schema,\r\n        col_name,\r\n        case\r\n          when col_type ilike 'character varying%' then\r\n            'character varying'\r\n          when col_type ilike 'numeric%' then 'numeric'\r\n          else col_type\r\n        end as col_type,\r\n        case\r\n          when col_type like 'character%'\r\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\r\n          else null\r\n        end as character_maximum_length,\r\n        case\r\n          when col_type like 'numeric%'\r\n          then nullif(\r\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\r\n            '')::int\r\n          else null\r\n        end as numeric_precision,\r\n        case\r\n          when col_type like 'numeric%'\r\n          then nullif(\r\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\r\n            '')::int\r\n          else null\r\n        end as numeric_scale\r\n\r\n      from pg_get_late_binding_view_cols()\r\n      cols(view_schema name, view_name name, col_name name,\r\n           col_type varchar, ordinal_position int)\r\n      where view_name = '{{ relation.identifier }}'\r\n    ),\r\n\r\n    external_views as (\r\n      select\r\n        columnnum,\r\n        schemaname,\r\n        columnname,\r\n        case\r\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\r\n          then 'character varying'\r\n          when external_type ilike 'numeric%' then 'numeric'\r\n          else external_type\r\n        end as external_type,\r\n        case\r\n          when external_type like 'character%' or external_type like 'varchar%'\r\n          then nullif(\r\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\r\n            '')::int\r\n          else null\r\n        end as character_maximum_length,\r\n        case\r\n          when external_type like 'numeric%'\r\n          then nullif(\r\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\r\n            '')::int\r\n          else null\r\n        end as numeric_precision,\r\n        case\r\n          when external_type like 'numeric%'\r\n          then nullif(\r\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\r\n            '')::int\r\n          else null\r\n        end as numeric_scale\r\n      from\r\n        pg_catalog.svv_external_columns\r\n      where\r\n        schemaname = '{{ relation.schema }}'\r\n        and tablename = '{{ relation.identifier }}'\r\n\r\n    ),\r\n\r\n    unioned as (\r\n      select * from bound_views\r\n      union all\r\n      select * from unbound_views\r\n      union all\r\n      select * from external_views\r\n    )\r\n\r\n    select\r\n      column_name,\r\n      data_type,\r\n      character_maximum_length,\r\n      numeric_precision,\r\n      numeric_scale\r\n\r\n    from unioned\r\n    {% if relation.schema %}\r\n    where table_schema = '{{ relation.schema }}'\r\n    {% endif %}\r\n    order by ordinal_position\r\n  {% endcall %}\r\n  {% set table = load_result('get_columns_in_relation').table %}\r\n  {{ return(sql_convert_columns_in_relation(table)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\r\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\r\n  {{ return(postgres__information_schema_name(database)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\r\n  {{ return(postgres__list_schemas(database)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\r\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\r\n  getdate()\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\r\n  {{ current_timestamp() }}::timestamp\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\r\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\r\n    {{ return(result) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\r\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\r\n  {% if for_relation and config.persist_relation_docs() and model.description %}\r\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\r\n  {% endif %}\r\n\r\n  {# Override: do not set column comments for LBVs #}\r\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\r\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\r\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\r\n  {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\r\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\r\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\r\n  {%- call statement('base_catalog', fetch_result=True) -%}\r\n    {% set database = information_schema.database %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    with late_binding as (\r\n      select\r\n        '{{ database }}'::varchar as table_database,\r\n        table_schema,\r\n        table_name,\r\n        'LATE BINDING VIEW'::varchar as table_type,\r\n        null::text as table_comment,\r\n\r\n        column_name,\r\n        column_index,\r\n        column_type,\r\n        null::text as column_comment\r\n      from pg_get_late_binding_view_cols()\r\n        cols(table_schema name, table_name name, column_name name,\r\n             column_type varchar,\r\n             column_index int)\r\n        order by \"column_index\"\r\n    ),\r\n\r\n    early_binding as (\r\n        select\r\n            '{{ database }}'::varchar as table_database,\r\n            sch.nspname as table_schema,\r\n            tbl.relname as table_name,\r\n            case tbl.relkind\r\n                when 'v' then 'VIEW'\r\n                else 'BASE TABLE'\r\n            end as table_type,\r\n            tbl_desc.description as table_comment,\r\n            col.attname as column_name,\r\n            col.attnum as column_index,\r\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\r\n            col_desc.description as column_comment\r\n\r\n        from pg_catalog.pg_namespace sch\r\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\r\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\r\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\r\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\r\n        where (\r\n            {%- for schema in schemas -%}\r\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n            {%- endfor -%}\r\n          )\r\n            and tbl.relkind in ('r', 'v', 'f', 'p')\r\n            and col.attnum > 0\r\n            and not col.attisdropped\r\n    ),\r\n\r\n    table_owners as (\r\n\r\n        select\r\n            '{{ database }}'::varchar as table_database,\r\n            schemaname as table_schema,\r\n            tablename as table_name,\r\n            tableowner as table_owner\r\n\r\n        from pg_tables\r\n\r\n        union all\r\n\r\n        select\r\n            '{{ database }}'::varchar as table_database,\r\n            schemaname as table_schema,\r\n            viewname as table_name,\r\n            viewowner as table_owner\r\n\r\n        from pg_views\r\n\r\n    ),\r\n\r\n    unioned as (\r\n\r\n        select *\r\n        from early_binding\r\n\r\n        union all\r\n\r\n        select *\r\n        from late_binding\r\n\r\n    )\r\n\r\n    select *,\r\n        table_database || '.' || table_schema || '.' || table_name as table_id\r\n\r\n    from unioned\r\n    join table_owners using (table_database, table_schema, table_name)\r\n\r\n    where (\r\n        {%- for schema in schemas -%}\r\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n        {%- endfor -%}\r\n      )\r\n\r\n    order by \"column_index\"\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('base_catalog').table) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\r\n  {%- call statement('extended_catalog', fetch_result=True) -%}\r\n\r\n    select\r\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\r\n\r\n        'Encoded'::text as \"stats:encoded:label\",\r\n        encoded as \"stats:encoded:value\",\r\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\r\n        true as \"stats:encoded:include\",\r\n\r\n        'Dist Style' as \"stats:diststyle:label\",\r\n        diststyle as \"stats:diststyle:value\",\r\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\r\n        true as \"stats:diststyle:include\",\r\n\r\n        'Sort Key 1' as \"stats:sortkey1:label\",\r\n        -- handle 0xFF byte in response for interleaved sort styles\r\n        case\r\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\r\n            else sortkey1\r\n        end as \"stats:sortkey1:value\",\r\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\r\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\r\n\r\n        'Max Varchar' as \"stats:max_varchar:label\",\r\n        max_varchar as \"stats:max_varchar:value\",\r\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\r\n        true as \"stats:max_varchar:include\",\r\n\r\n        -- exclude this, as the data is strangely returned with null-byte characters\r\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\r\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\r\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\r\n        false as \"stats:sortkey1_enc:include\",\r\n\r\n        '# Sort Keys' as \"stats:sortkey_num:label\",\r\n        sortkey_num as \"stats:sortkey_num:value\",\r\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\r\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\r\n\r\n        'Approximate Size' as \"stats:size:label\",\r\n        size * 1000000 as \"stats:size:value\",\r\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\r\n        true as \"stats:size:include\",\r\n\r\n        'Disk Utilization' as \"stats:pct_used:label\",\r\n        pct_used / 100.0 as \"stats:pct_used:value\",\r\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\r\n        true as \"stats:pct_used:include\",\r\n\r\n        'Unsorted %' as \"stats:unsorted:label\",\r\n        unsorted / 100.0 as \"stats:unsorted:value\",\r\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\r\n        (unsorted is not null) as \"stats:unsorted:include\",\r\n\r\n        'Stats Off' as \"stats:stats_off:label\",\r\n        stats_off as \"stats:stats_off:value\",\r\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\r\n        true as \"stats:stats_off:include\",\r\n\r\n        'Approximate Row Count' as \"stats:rows:label\",\r\n        tbl_rows as \"stats:rows:value\",\r\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\r\n        true as \"stats:rows:include\",\r\n\r\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\r\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\r\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\r\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\r\n\r\n        'Skew Rows' as \"stats:skew_rows:label\",\r\n        skew_rows as \"stats:skew_rows:value\",\r\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\r\n        (skew_rows is not null) as \"stats:skew_rows:include\"\r\n\r\n    from svv_table_info\r\n    where (\r\n        {%- for schema in schemas -%}\r\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n        {%- endfor -%}\r\n    )\r\n\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('extended_catalog').table) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\r\n\r\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\r\n\r\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\r\n\r\n  {%- endcall -%}\r\n\r\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\r\n  {{ return(can_select) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\r\n\r\n    {% set msg %}\r\n\r\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\r\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\r\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\r\n\r\n    {% endset %}\r\n\r\n    {{ log(msg, info=True) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\r\n\r\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\r\n      -- leader-only, and cannot be joined to other compute-based queries #}\r\n\r\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\r\n\r\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\r\n    {% if select_extended %}\r\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\r\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\r\n    {% else %}\r\n        {{ redshift__no_svv_table_info_warning() }}\r\n    {% endif %}\r\n\r\n    {{ return(catalog.exclude(['table_id'])) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\relations.sql", "original_file_path": "macros\\relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\r\n  {{ return(dbt.postgres__get_relations()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\redshift", "path": "macros\\materializations\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\r\n  {%- set unlogged = config.get('unlogged', default=false) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary -%}\r\n    temporary\r\n  {%- elif unlogged -%}\r\n    unlogged\r\n  {%- endif %} table {{ relation }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\r\n  {%- set index_config = adapter.parse_index(index_dict) -%}\r\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\r\n  {%- set index_name = index_config.render(relation) -%}\r\n\r\n  create {% if index_config.unique -%}\r\n    unique\r\n  {%- endif %} index if not exists\r\n  \"{{ index_name }}\"\r\n  on {{ relation }} {% if index_config.type -%}\r\n    using {{ index_config.type }}\r\n  {%- endif %}\r\n  ({{ comma_separated_columns }});\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\r\n  {% if relation.database -%}\r\n    {{ adapter.verify_database(relation.database) }}\r\n  {%- endif -%}\r\n  {%- call statement('create_schema') -%}\r\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\r\n  {%- endcall -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\r\n  {% if relation.database -%}\r\n    {{ adapter.verify_database(relation.database) }}\r\n  {%- endif -%}\r\n  {%- call statement('drop_schema') -%}\r\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\r\n  {%- endcall -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\r\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\r\n      select\r\n          column_name,\r\n          data_type,\r\n          character_maximum_length,\r\n          numeric_precision,\r\n          numeric_scale\r\n\r\n      from {{ relation.information_schema('columns') }}\r\n      where table_name = '{{ relation.identifier }}'\r\n        {% if relation.schema %}\r\n        and table_schema = '{{ relation.schema }}'\r\n        {% endif %}\r\n      order by ordinal_position\r\n\r\n  {% endcall %}\r\n  {% set table = load_result('get_columns_in_relation').table %}\r\n  {{ return(sql_convert_columns_in_relation(table)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\r\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      tablename as name,\r\n      schemaname as schema,\r\n      'table' as type\r\n    from pg_tables\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n    union all\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      viewname as name,\r\n      schemaname as schema,\r\n      'view' as type\r\n    from pg_views\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n  {% endcall %}\r\n  {{ return(load_result('list_relations_without_caching').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\r\n  {% if database_name -%}\r\n    {{ adapter.verify_database(database_name) }}\r\n  {%- endif -%}\r\n  information_schema\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\r\n  {% if database -%}\r\n    {{ adapter.verify_database(database) }}\r\n  {%- endif -%}\r\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\r\n    select distinct nspname from pg_namespace\r\n  {% endcall %}\r\n  {{ return(load_result('list_schemas').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\r\n  {% if information_schema.database -%}\r\n    {{ adapter.verify_database(information_schema.database) }}\r\n  {%- endif -%}\r\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\r\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\r\n  {% endcall %}\r\n  {{ return(load_result('check_schema_exists').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\r\n  now()\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\r\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\r\n    {{ return(result) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\r\n  {{ current_timestamp() }}::timestamp without time zone\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\r\n    {% set dt = modules.datetime.datetime.now() %}\r\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\r\n    {% set suffix_length = suffix|length + dtstring|length %}\r\n    {% set relation_max_name_length = 63 %}\r\n    {% if suffix_length > relation_max_name_length %}\r\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\r\n    {% endif %}\r\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\r\n    {% do return(base_relation.incorporate(\r\n                                  path={\r\n                                    \"identifier\": tmp_identifier,\r\n                                    \"schema\": none,\r\n                                    \"database\": none\r\n                                  })) -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\r\n  {% if comment is not string %}\r\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\r\n  {% endif %}\r\n  {%- set magic = '$dbt_comment_literal_block$' -%}\r\n  {%- if magic in comment -%}\r\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\r\n  {%- endif -%}\r\n  {{ magic }}{{ comment }}{{ magic }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\r\n  {% set escaped_comment = postgres_escape_comment(comment) %}\r\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\r\n  {% for column_name in column_dict %}\r\n    {% set comment = column_dict[column_name]['description'] %}\r\n    {% set escaped_comment = postgres_escape_comment(comment) %}\r\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\r\n\r\n  {%- call statement('catalog', fetch_result=True) -%}\r\n    {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n    {% set database = information_schema.database %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    select\r\n        '{{ database }}' as table_database,\r\n        sch.nspname as table_schema,\r\n        tbl.relname as table_name,\r\n        case tbl.relkind\r\n            when 'v' then 'VIEW'\r\n            else 'BASE TABLE'\r\n        end as table_type,\r\n        tbl_desc.description as table_comment,\r\n        col.attname as column_name,\r\n        col.attnum as column_index,\r\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\r\n        col_desc.description as column_comment,\r\n        pg_get_userbyid(tbl.relowner) as table_owner\r\n\r\n    from pg_catalog.pg_namespace sch\r\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\r\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\r\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\r\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\r\n\r\n    where (\r\n        {%- for schema in schemas -%}\r\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n        {%- endfor -%}\r\n      )\r\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\r\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\r\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\r\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\r\n      and not col.attisdropped -- column as not been dropped\r\n\r\n    order by\r\n        sch.nspname,\r\n        tbl.relname,\r\n        col.attnum\r\n\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('catalog').table) }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\relations.sql", "original_file_path": "macros\\relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\r\n\r\n  {#\r\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\r\n      --  > a pg_depend entry indicates that the referenced object cannot be\r\n      --  > dropped without also dropping the dependent object.\r\n  #}\r\n\r\n  {%- call statement('relations', fetch_result=True) -%}\r\n    with relation as (\r\n        select\r\n            pg_rewrite.ev_class as class,\r\n            pg_rewrite.oid as id\r\n        from pg_rewrite\r\n    ),\r\n    class as (\r\n        select\r\n            oid as id,\r\n            relname as name,\r\n            relnamespace as schema,\r\n            relkind as kind\r\n        from pg_class\r\n    ),\r\n    dependency as (\r\n        select\r\n            pg_depend.objid as id,\r\n            pg_depend.refobjid as ref\r\n        from pg_depend\r\n    ),\r\n    schema as (\r\n        select\r\n            pg_namespace.oid as id,\r\n            pg_namespace.nspname as name\r\n        from pg_namespace\r\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\r\n    ),\r\n    referenced as (\r\n        select\r\n            relation.id AS id,\r\n            referenced_class.name ,\r\n            referenced_class.schema ,\r\n            referenced_class.kind\r\n        from relation\r\n        join class as referenced_class on relation.class=referenced_class.id\r\n        where referenced_class.kind in ('r', 'v')\r\n    ),\r\n    relationships as (\r\n        select\r\n            referenced.name as referenced_name,\r\n            referenced.schema as referenced_schema_id,\r\n            dependent_class.name as dependent_name,\r\n            dependent_class.schema as dependent_schema_id,\r\n            referenced.kind as kind\r\n        from referenced\r\n        join dependency on referenced.id=dependency.id\r\n        join class as dependent_class on dependency.ref=dependent_class.id\r\n        where\r\n            (referenced.name != dependent_class.name or\r\n             referenced.schema != dependent_class.schema)\r\n    )\r\n\r\n    select\r\n        referenced_schema.name as referenced_schema,\r\n        relationships.referenced_name as referenced_name,\r\n        dependent_schema.name as dependent_schema,\r\n        relationships.dependent_name as dependent_name\r\n    from relationships\r\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\r\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\r\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\r\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\r\n\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('relations').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\postgres", "path": "macros\\materializations\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\r\n\r\n    update {{ target }}\r\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\r\n    from {{ source }} as DBT_INTERNAL_SOURCE\r\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\r\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\r\n      and {{ target }}.dbt_valid_to is null;\r\n\r\n    insert into {{ target }} ({{ insert_cols_csv }})\r\n    select {% for column in insert_cols -%}\r\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\r\n    {%- endfor %}\r\n    from {{ source }} as DBT_INTERNAL_SOURCE\r\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\r\n  {%- if execute: -%}\r\n    {%- set sql = caller() -%}\r\n\r\n    {%- if name == 'main' -%}\r\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\r\n      {{ write(sql) }}\r\n    {%- endif -%}\r\n\r\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\r\n    {%- if name is not none -%}\r\n      {{ store_result(name, response=res, agate_table=table) }}\r\n    {%- endif -%}\r\n\r\n  {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\r\n  {%- set sql = caller() -%}\r\n\r\n  {%- if name == 'main' -%}\r\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\r\n    {{ write(sql) }}\r\n  {%- endif -%}\r\n\r\n  {%- if name is not none -%}\r\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\r\n  {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\r\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\r\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\r\n        select * from (\r\n            {{ select_sql }}\r\n        ) as __dbt_sbq\r\n        where false\r\n        limit 0\r\n    {% endcall %}\r\n\r\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\r\n  {{ adapter.dispatch('create_schema')(relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\r\n  {%- call statement('create_schema') -%}\r\n    create schema if not exists {{ relation.without_identifier() }}\r\n  {% endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\r\n  {{ adapter.dispatch('drop_schema')(relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\r\n  {%- call statement('drop_schema') -%}\r\n    drop schema if exists {{ relation.without_identifier() }} cascade\r\n  {% endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\r\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary: -%}temporary{%- endif %} table\r\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\r\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\r\n  {% do return(None) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\r\n  {{ adapter.dispatch('create_indexes')(relation) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\r\n  {%- set _indexes = config.get('indexes', default=[]) -%}\r\n\r\n  {% for _index_dict in _indexes %}\r\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\r\n    {% if create_index_sql %}\r\n      {% do run_query(create_index_sql) %}\r\n    {% endif %}\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\r\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n  create view {{ relation }} as (\r\n    {{ sql }}\r\n  );\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\r\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\r\n\r\n  {% set typename = adapter.type() %}\r\n  {% set msg -%}\r\n    get_catalog not implemented for {{ typename }}\r\n  {%- endset %}\r\n\r\n  {{ exceptions.raise_compiler_error(msg) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\r\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\r\n  {% set columns = [] %}\r\n  {% for row in table %}\r\n    {% do columns.append(api.Column(*row)) %}\r\n  {% endfor %}\r\n  {{ return(columns) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\r\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\r\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\r\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\r\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\r\n  {% if for_relation and config.persist_relation_docs() and model.description %}\r\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\r\n  {% endif %}\r\n\r\n  {% if for_columns and config.persist_column_docs() and model.columns %}\r\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\r\n  {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\r\n  {#\r\n    1. Create a new column (w/ temp name and correct type)\r\n    2. Copy data over to it\r\n    3. Drop the existing column (cascade!)\r\n    4. Rename the new column to existing column\r\n  #}\r\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\r\n\r\n  {% call statement('alter_column_type') %}\r\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\r\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\r\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\r\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\r\n  {% endcall %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\r\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\r\n  {% call statement('drop_relation', auto_begin=False) -%}\r\n    drop {{ relation.type }} if exists {{ relation }} cascade\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\r\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\r\n  {% call statement('truncate_relation') -%}\r\n    truncate table {{ relation }}\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\r\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\r\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\r\n  {% call statement('rename_relation') -%}\r\n    alter table {{ from_relation }} rename to {{ target_name }}\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\r\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\r\n  {%- if database -%}\r\n    {{ database }}.INFORMATION_SCHEMA\r\n  {%- else -%}\r\n    INFORMATION_SCHEMA\r\n  {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\r\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\r\n  {% set sql %}\r\n    select distinct schema_name\r\n    from {{ information_schema_name(database) }}.SCHEMATA\r\n    where catalog_name ilike '{{ database }}'\r\n  {% endset %}\r\n  {{ return(run_query(sql)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\r\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\r\n  {% set sql -%}\r\n        select count(*)\r\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\r\n        where catalog_name='{{ information_schema.database }}'\r\n          and schema_name='{{ schema }}'\r\n  {%- endset %}\r\n  {{ return(run_query(sql)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\r\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\r\n  {{ exceptions.raise_not_implemented(\r\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\r\n  {{ adapter.dispatch('current_timestamp')() }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\r\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\r\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\r\n    select\r\n      max({{ loaded_at_field }}) as max_loaded_at,\r\n      {{ current_timestamp() }} as snapshotted_at\r\n    from {{ source }}\r\n    {% if filter %}\r\n    where {{ filter }}\r\n    {% endif %}\r\n  {% endcall %}\r\n  {{ return(load_result('collect_freshness').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\r\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\r\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\r\n    {% set tmp_relation = base_relation.incorporate(\r\n                                path={\"identifier\": tmp_identifier}) -%}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\r\n  {{ config.set('sql_header', caller()) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\r\n\r\n  {% set error_msg -%}\r\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\r\n  {%- endset %}\r\n\r\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\r\n  {{ return(res) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\r\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\r\n\r\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\r\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\r\n\r\n    {% set day_count = (end_date - start_date).days %}\r\n    {% if day_count < 0 %}\r\n        {% set msg -%}\r\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\r\n        {%- endset %}\r\n\r\n        {{ exceptions.raise_compiler_error(msg, model) }}\r\n    {% endif %}\r\n\r\n    {% set date_list = [] %}\r\n    {% for i in range(0, day_count + 1) %}\r\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\r\n        {% if not out_fmt %}\r\n            {% set _ = date_list.append(the_date) %}\r\n        {% else %}\r\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {{ return(date_list) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\r\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\r\n\r\n    {% if (partition_range | length) == 1 %}\r\n      {% set start_date = partition_range[0] %}\r\n      {% set end_date = none %}\r\n    {% elif (partition_range | length) == 2 %}\r\n      {% set start_date = partition_range[0] %}\r\n      {% set end_date = partition_range[1] %}\r\n    {% else %}\r\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\r\n    {% endif %}\r\n\r\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\r\n    {% set dt = modules.datetime.datetime.now() %}\r\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_alias.sql", "original_file_path": "macros\\etc\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n\r\n    {%- if custom_alias_name is none -%}\r\n\r\n        {{ node.name }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_alias_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\r\n    {%- set default_database = target.database -%}\r\n    {%- if custom_database_name is none -%}\r\n\r\n        {{ default_database }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_database_name }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ default_schema }}_{{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\is_incremental.sql", "original_file_path": "macros\\etc\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n        {{ return(relation is not none\r\n                  and relation.type == 'table'\r\n                  and model.config.materialized == 'incremental'\r\n                  and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\query.sql", "original_file_path": "macros\\etc\\query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\r\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\r\n    {{ sql }}\r\n  {% endcall %}\r\n\r\n  {% do return(load_result(\"run_query_statement\").table) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\r\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\r\n    {% if not inside_transaction and loop.first %}\r\n      {% call statement(auto_begin=inside_transaction) %}\r\n        commit;\r\n      {% endcall %}\r\n    {% endif %}\r\n    {% set rendered = render(hook.get('sql')) | trim %}\r\n    {% if (rendered | length) > 0 %}\r\n      {% call statement(auto_begin=inside_transaction) %}\r\n        {{ rendered }}\r\n      {% endcall %}\r\n    {% endif %}\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\r\n  {%- for col in columns %}\r\n    {{ col.name }} {% if not loop.last %},{% endif %}\r\n  {% endfor -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\r\n  {%- for col in columns %}\r\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\r\n  {% endfor -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\r\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=False) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=True) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=False) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\r\n  {% if relation is not none %}\r\n    {{ adapter.drop_relation(relation) }}\r\n  {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\r\n  {% do return(adapter.get_relation(\r\n    database=relation.database,\r\n    schema=relation.schema,\r\n    identifier=relation.identifier\r\n  )) -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\r\n  {% set config_full_refresh = config.get('full_refresh') %}\r\n  {% if config_full_refresh is none %}\r\n    {% set config_full_refresh = flags.FULL_REFRESH %}\r\n  {% endif %}\r\n  {% do return(config_full_refresh) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\r\n  {% set config_store_failures = config.get('store_failures') %}\r\n  {% if config_store_failures is none %}\r\n    {% set config_store_failures = flags.STORE_FAILURES %}\r\n  {% endif %}\r\n  {% do return(config_store_failures) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\r\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\r\n    select\r\n      {{ fail_calc }} as failures,\r\n      {{ fail_calc }} {{ warn_if }} as should_warn,\r\n      {{ fail_calc }} {{ error_if }} as should_error\r\n    from (\r\n      {{ main_sql }}\r\n      {{ \"limit \" ~ limit if limit != none }}\r\n    ) dbt_internal_test\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "materialization_test_default", "macro_sql": "\r\n\r\n{%- materialization test, default -%}\r\n\r\n  {% set relations = [] %}\r\n\r\n  {% if should_store_failures() %}\r\n\r\n    {% set identifier = model['alias'] %}\r\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\r\n    {% set target_relation = api.Relation.create(\r\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\r\n    \r\n    {% if old_relation %}\r\n        {% do adapter.drop_relation(old_relation) %}\r\n    {% endif %}\r\n    \r\n    {% call statement(auto_begin=True) %}\r\n        {{ create_table_as(False, target_relation, sql) }}\r\n    {% endcall %}\r\n    \r\n    {% do relations.append(target_relation) %}\r\n  \r\n    {% set main_sql %}\r\n        select *\r\n        from {{ target_relation }}\r\n    {% endset %}\r\n    \r\n    {{ adapter.commit() }}\r\n  \r\n  {% else %}\r\n\r\n      {% set main_sql = sql %}\r\n  \r\n  {% endif %}\r\n\r\n  {% set limit = config.get('limit') %}\r\n  {% set fail_calc = config.get('fail_calc') %}\r\n  {% set warn_if = config.get('warn_if') %}\r\n  {% set error_if = config.get('error_if') %}\r\n\r\n  {% call statement('main', fetch_result=True) -%}\r\n\r\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\r\n\r\n  {%- endcall %}\r\n  \r\n  {{ return({'relations': relations}) }}\r\n\r\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\r\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\r\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\r\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\r\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\r\n    {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n    {% if unique_key %}\r\n        {% set unique_key_match %}\r\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\r\n        {% endset %}\r\n        {% do predicates.append(unique_key_match) %}\r\n    {% else %}\r\n        {% do predicates.append('FALSE') %}\r\n    {% endif %}\r\n\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n    merge into {{ target }} as DBT_INTERNAL_DEST\r\n        using {{ source }} as DBT_INTERNAL_SOURCE\r\n        on {{ predicates | join(' and ') }}\r\n\r\n    {% if unique_key %}\r\n    when matched then update set\r\n        {% for column_name in update_columns -%}\r\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\r\n            {%- if not loop.last %}, {%- endif %}\r\n        {%- endfor %}\r\n    {% endif %}\r\n\r\n    when not matched then insert\r\n        ({{ dest_cols_csv }})\r\n    values\r\n        ({{ dest_cols_csv }})\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\r\n    {% set quoted = [] %}\r\n    {% for col in column_names -%}\r\n        {%- do quoted.append(adapter.quote(col)) -%}\r\n    {%- endfor %}\r\n\r\n    {%- set dest_cols_csv = quoted | join(', ') -%}\r\n    {{ return(dest_cols_csv) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\r\n\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n\r\n    {% if unique_key is not none %}\r\n    delete from {{ target }}\r\n    where ({{ unique_key }}) in (\r\n        select ({{ unique_key }})\r\n        from {{ source }}\r\n    );\r\n    {% endif %}\r\n\r\n    insert into {{ target }} ({{ dest_cols_csv }})\r\n    (\r\n        select {{ dest_cols_csv }}\r\n        from {{ source }}\r\n    );\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\r\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\r\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n    {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n    {{ sql_header if sql_header is not none and include_sql_header }}\r\n\r\n    merge into {{ target }} as DBT_INTERNAL_DEST\r\n        using {{ source }} as DBT_INTERNAL_SOURCE\r\n        on FALSE\r\n\r\n    when not matched by source\r\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\r\n        then delete\r\n\r\n    when not matched then insert\r\n        ({{ dest_cols_csv }})\r\n    values\r\n        ({{ dest_cols_csv }})\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    {%- if unique_key is not none -%}\r\n    delete\r\n    from {{ target_relation }}\r\n    where ({{ unique_key }}) in (\r\n        select ({{ unique_key }})\r\n        from {{ tmp_relation }}\r\n    );\r\n    {%- endif %}\r\n\r\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       select {{ dest_cols_csv }}\r\n       from {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\r\n\r\n  {% set unique_key = config.get('unique_key') %}\r\n\r\n  {% set target_relation = this.incorporate(type='table') %}\r\n  {% set existing_relation = load_relation(this) %}\r\n\r\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\r\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\r\n\r\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\r\n  -- will return None in that case. Otherwise, we get a relation that we can drop\r\n  -- later, before we try to use this name for the current operation. This has to happen before\r\n  -- BEGIN, in a separate transaction\r\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \r\n                                                                  schema=schema,\r\n                                                                  database=database) %}                                               \r\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\r\n                                                            schema=schema,\r\n                                                            database=database) %}\r\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set to_drop = [] %}\r\n  {% if existing_relation is none %}\r\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\r\n  {% elif existing_relation.is_view or should_full_refresh() %}\r\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\r\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\r\n\r\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\r\n      {% set need_swap = true %}\r\n      {% do to_drop.append(backup_relation) %}\r\n  {% else %}\r\n      {% set tmp_relation = make_temp_relation(target_relation) %}\r\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\r\n      {% do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) %}\r\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\r\n  {% endif %}\r\n\r\n  {% call statement(\"main\") %}\r\n      {{ build_sql }}\r\n  {% endcall %}\r\n\r\n  {% if need_swap %} \r\n      {% do adapter.rename_relation(target_relation, backup_relation) %} \r\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \r\n  {% endif %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\r\n    {% do create_indexes(target_relation) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {% do adapter.commit() %}\r\n\r\n  {% for rel in to_drop %}\r\n      {% do adapter.drop_relation(rel) %}\r\n  {% endfor %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\r\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\r\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\r\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\r\n  {%- set column_override = model['config'].get('column_types', {}) -%}\r\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\r\n\r\n  {% set sql %}\r\n    create table {{ this.render() }} (\r\n        {%- for col_name in agate_table.column_names -%}\r\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\r\n            {%- set type = column_override.get(col_name, inferred_type) -%}\r\n            {%- set column_name = (col_name | string) -%}\r\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\r\n        {%- endfor -%}\r\n    )\r\n  {% endset %}\r\n\r\n  {% call statement('_') -%}\r\n    {{ sql }}\r\n  {%- endcall %}\r\n\r\n  {{ return(sql) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\r\n    {% set sql = \"\" %}\r\n    {% if full_refresh %}\r\n        {{ adapter.drop_relation(old_relation) }}\r\n        {% set sql = create_csv_table(model, agate_table) %}\r\n    {% else %}\r\n        {{ adapter.truncate_relation(old_relation) }}\r\n        {% set sql = \"truncate table \" ~ old_relation %}\r\n    {% endif %}\r\n\r\n    {{ return(sql) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\r\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\r\n    {% set quoted = [] %}\r\n    {% for col in column_names -%}\r\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\r\n    {%- endfor %}\r\n\r\n    {%- set dest_cols_csv = quoted | join(', ') -%}\r\n    {{ return(dest_cols_csv) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\r\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\r\n    {% set bindings = [] %}\r\n\r\n    {% set statements = [] %}\r\n\r\n    {% for chunk in agate_table.rows | batch(batch_size) %}\r\n        {% set bindings = [] %}\r\n\r\n        {% for row in chunk %}\r\n            {% do bindings.extend(row) %}\r\n        {% endfor %}\r\n\r\n        {% set sql %}\r\n            insert into {{ this.render() }} ({{ cols_sql }}) values\r\n            {% for row in chunk -%}\r\n                ({%- for column in agate_table.column_names -%}\r\n                    %s\r\n                    {%- if not loop.last%},{%- endif %}\r\n                {%- endfor -%})\r\n                {%- if not loop.last%},{%- endif %}\r\n            {%- endfor %}\r\n        {% endset %}\r\n\r\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\r\n\r\n        {% if loop.index0 == 0 %}\r\n            {% do statements.append(sql) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {# Return SQL so we can render it out into the compiled files #}\r\n    {{ return(statements[0]) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\r\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\r\n\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n  {%- set agate_table = load_agate_table() -%}\r\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% set create_table_sql = \"\" %}\r\n  {% if exists_as_view %}\r\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\r\n  {% elif exists_as_table %}\r\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\r\n  {% else %}\r\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\r\n  {% endif %}\r\n\r\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\r\n  {% set rows_affected = (agate_table.rows | length) %}\r\n  {% set sql = load_csv_rows(model, agate_table) %}\r\n\r\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\r\n    {{ create_table_sql }};\r\n    -- dbt seed --\r\n    {{ sql }}\r\n  {% endcall %}\r\n\r\n  {% set target_relation = this.incorporate(type='table') %}\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {% if full_refresh_mode or not exists_as_table %}\r\n    {% do create_indexes(target_relation) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\r\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\r\n  {% for column in columns %}\r\n    {% call statement() %}\r\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\r\n    {% endcall %}\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\r\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\r\n    {# no-op #}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\r\n\r\n    with snapshot_query as (\r\n\r\n        {{ source_sql }}\r\n\r\n    ),\r\n\r\n    snapshotted_data as (\r\n\r\n        select *,\r\n            {{ strategy.unique_key }} as dbt_unique_key\r\n\r\n        from {{ target_relation }}\r\n        where dbt_valid_to is null\r\n\r\n    ),\r\n\r\n    insertions_source_data as (\r\n\r\n        select\r\n            *,\r\n            {{ strategy.unique_key }} as dbt_unique_key,\r\n            {{ strategy.updated_at }} as dbt_updated_at,\r\n            {{ strategy.updated_at }} as dbt_valid_from,\r\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\r\n            {{ strategy.scd_id }} as dbt_scd_id\r\n\r\n        from snapshot_query\r\n    ),\r\n\r\n    updates_source_data as (\r\n\r\n        select\r\n            *,\r\n            {{ strategy.unique_key }} as dbt_unique_key,\r\n            {{ strategy.updated_at }} as dbt_updated_at,\r\n            {{ strategy.updated_at }} as dbt_valid_from,\r\n            {{ strategy.updated_at }} as dbt_valid_to\r\n\r\n        from snapshot_query\r\n    ),\r\n\r\n    {%- if strategy.invalidate_hard_deletes %}\r\n\r\n    deletes_source_data as (\r\n\r\n        select \r\n            *,\r\n            {{ strategy.unique_key }} as dbt_unique_key\r\n        from snapshot_query\r\n    ),\r\n    {% endif %}\r\n\r\n    insertions as (\r\n\r\n        select\r\n            'insert' as dbt_change_type,\r\n            source_data.*\r\n\r\n        from insertions_source_data as source_data\r\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where snapshotted_data.dbt_unique_key is null\r\n           or (\r\n                snapshotted_data.dbt_unique_key is not null\r\n            and (\r\n                {{ strategy.row_changed }}\r\n            )\r\n        )\r\n\r\n    ),\r\n\r\n    updates as (\r\n\r\n        select\r\n            'update' as dbt_change_type,\r\n            source_data.*,\r\n            snapshotted_data.dbt_scd_id\r\n\r\n        from updates_source_data as source_data\r\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where (\r\n            {{ strategy.row_changed }}\r\n        )\r\n    )\r\n\r\n    {%- if strategy.invalidate_hard_deletes -%}\r\n    ,\r\n\r\n    deletes as (\r\n    \r\n        select\r\n            'delete' as dbt_change_type,\r\n            source_data.*,\r\n            {{ snapshot_get_time() }} as dbt_valid_from,\r\n            {{ snapshot_get_time() }} as dbt_updated_at,\r\n            {{ snapshot_get_time() }} as dbt_valid_to,\r\n            snapshotted_data.dbt_scd_id\r\n    \r\n        from snapshotted_data\r\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where source_data.dbt_unique_key is null\r\n    )\r\n    {%- endif %}\r\n\r\n    select * from insertions\r\n    union all\r\n    select * from updates\r\n    {%- if strategy.invalidate_hard_deletes %}\r\n    union all\r\n    select * from deletes\r\n    {%- endif %}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\r\n\r\n    select *,\r\n        {{ strategy.scd_id }} as dbt_scd_id,\r\n        {{ strategy.updated_at }} as dbt_updated_at,\r\n        {{ strategy.updated_at }} as dbt_valid_from,\r\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\r\n    from (\r\n        {{ sql }}\r\n    ) sbq\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\r\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\r\n\r\n  {% if target_relation %}\r\n    {% do return([true, target_relation]) %}\r\n  {% endif %}\r\n\r\n  {%- set new_relation = api.Relation.create(\r\n      database=database,\r\n      schema=schema,\r\n      identifier=identifier,\r\n      type=type\r\n  ) -%}\r\n  {% do return([false, new_relation]) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n    {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n    {% call statement('build_snapshot_staging_relation') %}\r\n        {{ create_table_as(True, tmp_relation, select) }}\r\n    {% endcall %}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\r\n  {%- set config = model['config'] -%}\r\n\r\n  {%- set target_table = model.get('alias', model.get('name')) -%}\r\n\r\n  {%- set strategy_name = config.get('strategy') -%}\r\n  {%- set unique_key = config.get('unique_key') %}\r\n\r\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\r\n    {% do create_schema(model.database, model.schema) %}\r\n  {% endif %}\r\n\r\n  {% set target_relation_exists, target_relation = get_or_create_relation(\r\n          database=model.database,\r\n          schema=model.schema,\r\n          identifier=target_table,\r\n          type='table') -%}\r\n\r\n  {%- if not target_relation.is_table -%}\r\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\r\n  {%- endif -%}\r\n\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\r\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\r\n\r\n  {% if not target_relation_exists %}\r\n\r\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\r\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\r\n\r\n  {% else %}\r\n\r\n      {{ adapter.valid_snapshot_target(target_relation) }}\r\n\r\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n      -- this may no-op if the database does not require column expansion\r\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\r\n                                               to_relation=target_relation) %}\r\n\r\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\r\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\r\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\r\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\r\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\r\n                                   | list %}\r\n\r\n      {% do create_columns(target_relation, missing_columns) %}\r\n\r\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\r\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\r\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\r\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\r\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\r\n                                   | list %}\r\n\r\n      {% set quoted_source_columns = [] %}\r\n      {% for column in source_columns %}\r\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\r\n      {% endfor %}\r\n\r\n      {% set final_sql = snapshot_merge_sql(\r\n            target = target_relation,\r\n            source = staging_table,\r\n            insert_cols = quoted_source_columns\r\n         )\r\n      %}\r\n\r\n  {% endif %}\r\n\r\n  {% call statement('main') %}\r\n      {{ final_sql }}\r\n  {% endcall %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {% if not target_relation_exists %}\r\n    {% do create_indexes(target_relation) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {% if staging_table is defined %}\r\n      {% do post_snapshot(staging_table) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\r\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\r\n\r\n    merge into {{ target }} as DBT_INTERNAL_DEST\r\n    using {{ source }} as DBT_INTERNAL_SOURCE\r\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\r\n\r\n    when matched\r\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\r\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\r\n        then update\r\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\r\n\r\n    when not matched\r\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\r\n        then insert ({{ insert_cols_csv }})\r\n        values ({{ insert_cols_csv }})\r\n    ;\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\r\n{% set original_name = name %}\r\n  {% if '.' in name %}\r\n    {% set package_name, name = name.split(\".\", 1) %}\r\n  {% else %}\r\n    {% set package_name = none %}\r\n  {% endif %}\r\n\r\n  {% if package_name is none %}\r\n    {% set package_context = context %}\r\n  {% elif package_name in context %}\r\n    {% set package_context = context[package_name] %}\r\n  {% else %}\r\n    {% set error_msg %}\r\n        Could not find package '{{package_name}}', called with '{{original_name}}'\r\n    {% endset %}\r\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n  {% endif %}\r\n\r\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\r\n\r\n  {% if search_name not in package_context %}\r\n    {% set error_msg %}\r\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\r\n    {% endset %}\r\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n  {% endif %}\r\n  {{ return(package_context[search_name]) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\r\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\r\n    md5({%- for arg in args -%}\r\n        coalesce(cast({{ arg }} as varchar ), '')\r\n        {% if not loop.last %} || '|' || {% endif %}\r\n    {%- endfor -%})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\r\n  {{ adapter.dispatch('snapshot_get_time')() }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\r\n  {{ current_timestamp() }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\r\n    {% set primary_key = config['unique_key'] %}\r\n    {% set updated_at = config['updated_at'] %}\r\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\r\n\r\n    {#/*\r\n        The snapshot relation might not have an {{ updated_at }} value if the\r\n        snapshot strategy is changed from `check` to `timestamp`. We\r\n        should use a dbt-created column for the comparison in the snapshot\r\n        table instead of assuming that the user-supplied {{ updated_at }}\r\n        will be present in the historical data.\r\n\r\n        See https://github.com/fishtown-analytics/dbt/issues/2350\r\n    */ #}\r\n    {% set row_changed_expr -%}\r\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\r\n    {%- endset %}\r\n\r\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\r\n\r\n    {% do return({\r\n        \"unique_key\": primary_key,\r\n        \"updated_at\": updated_at,\r\n        \"row_changed\": row_changed_expr,\r\n        \"scd_id\": scd_id_expr,\r\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\r\n    }) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\r\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\r\n    {% do exceptions.raise_not_implemented(\r\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\r\n    ) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\r\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\r\n    {%- if not target_exists -%}\r\n        {# no table yet -> return whatever the query does #}\r\n        {{ return([false, query_columns]) }}\r\n    {%- endif -%}\r\n    {# handle any schema changes #}\r\n    {%- set target_table = node.get('alias', node.get('name')) -%}\r\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\r\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\r\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\r\n    {%- set ns.column_added = false -%}\r\n\r\n    {%- set intersection = [] -%}\r\n    {%- for col in query_columns -%}\r\n        {%- if col in existing_cols -%}\r\n            {%- do intersection.append(col) -%}\r\n        {%- else -%}\r\n            {% set ns.column_added = true %}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ return([ns.column_added, intersection]) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\r\n    {% set check_cols_config = config['check_cols'] %}\r\n    {% set primary_key = config['unique_key'] %}\r\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\r\n    \r\n    {% set select_current_time -%}\r\n        select {{ snapshot_get_time() }} as snapshot_start\r\n    {%- endset %}\r\n\r\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\r\n    {%- set now = run_query(select_current_time)[0][0] -%}\r\n    {% if now is none or now is undefined -%}\r\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\r\n    {%- endif %}\r\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\r\n\r\n    {% set column_added = false %}\r\n\r\n    {% if check_cols_config == 'all' %}\r\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\r\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\r\n        {% set check_cols = check_cols_config %}\r\n    {% else %}\r\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\r\n    {% endif %}\r\n\r\n    {%- set row_changed_expr -%}\r\n    (\r\n    {%- if column_added -%}\r\n        TRUE\r\n    {%- else -%}\r\n    {%- for col in check_cols -%}\r\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\r\n        or\r\n        (\r\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\r\n            or\r\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\r\n        )\r\n        {%- if not loop.last %} or {% endif -%}\r\n    {%- endfor -%}\r\n    {%- endif -%}\r\n    )\r\n    {%- endset %}\r\n\r\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\r\n\r\n    {% do return({\r\n        \"unique_key\": primary_key,\r\n        \"updated_at\": updated_at,\r\n        \"row_changed\": row_changed_expr,\r\n        \"scd_id\": scd_id_expr,\r\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\r\n    }) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\table\\table.sql", "original_file_path": "macros\\materializations\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\r\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type='table') -%}\r\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema,\r\n                                                      database=database,\r\n                                                      type='table') -%}\r\n  -- the intermediate_relation should not already exist in the database; get_relation\r\n  -- will return None in that case. Otherwise, we get a relation that we can drop\r\n  -- later, before we try to use this name for the current operation\r\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \r\n                                                                   schema=schema,\r\n                                                                   database=database) -%}\r\n  /*\r\n      See ../view/view.sql for more information about this relation.\r\n  */\r\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\r\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type=backup_relation_type) -%}\r\n  -- as above, the backup_relation should not already exist\r\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\r\n                                                             schema=schema,\r\n                                                             database=database) -%}\r\n\r\n\r\n  -- drop the temp relations if they exist already in the database\r\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_table_as(False, intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- cleanup\r\n  {% if old_relation is not none %}\r\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\r\n  {% endif %}\r\n\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {% do create_indexes(target_relation) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  -- finally, drop the existing/backup relation after the commit\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\r\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\r\n    {{ adapter.drop_relation(old_relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\r\n  {%- set identifier = model['alias'] -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n  {%- set target_relation = api.Relation.create(\r\n      identifier=identifier, schema=schema, database=database,\r\n      type='view') -%}\r\n\r\n  {% if run_outside_transaction_hooks %}\r\n      -- no transactions on BigQuery\r\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  {% endif %}\r\n\r\n  -- `BEGIN` happens here on Snowflake\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- If there's a table with the same name and we weren't told to full refresh,\r\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\r\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\r\n  {%- if old_relation is not none and old_relation.is_table -%}\r\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\r\n  {%- endif -%}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_view_as(target_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {% if run_outside_transaction_hooks %}\r\n      -- No transactions on BigQuery\r\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {% endif %}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\view.sql", "original_file_path": "macros\\materializations\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\r\n\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\r\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\r\n                                                type='view') -%}\r\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema, database=database, type='view') -%}\r\n  -- the intermediate_relation should not already exist in the database; get_relation\r\n  -- will return None in that case. Otherwise, we get a relation that we can drop\r\n  -- later, before we try to use this name for the current operation\r\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \r\n                                                                   schema=schema,\r\n                                                                   database=database) -%}\r\n  /*\r\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\r\n     a previous run, and we're going to try to drop it immediately. At the end of this\r\n     materialization, we're going to rename the \"old_relation\" to this identifier,\r\n     and then we're going to drop it. In order to make sure we run the correct one of:\r\n       - drop view ...\r\n       - drop table ...\r\n\r\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\r\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\r\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\r\n     this relation will be effectively unused.\r\n  */\r\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\r\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema, database=database,\r\n                                                type=backup_relation_type) -%}\r\n  -- as above, the backup_relation should not already exist\r\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\r\n                                                             schema=schema,\r\n                                                             database=database) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- drop the temp relations if they exist already in the database\r\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_view_as(intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- cleanup\r\n  -- move the existing view out of the way\r\n  {% if old_relation is not none %}\r\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\r\n  {% endif %}\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\r\n\r\nwith all_values as (\r\n\r\n    select\r\n        {{ column_name }} as value_field,\r\n        count(*) as n_records\r\n\r\n    from {{ model }}\r\n    group by 1\r\n\r\n)\r\n\r\nselect *\r\nfrom all_values\r\nwhere value_field not in (\r\n    {% for value in values -%}\r\n        {% if quote -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif -%}\r\n        {%- if not loop.last -%},{%- endif %}\r\n    {%- endfor %}\r\n)\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\r\n    {% set macro = adapter.dispatch('test_accepted_values') %}\r\n    {{ macro(model, column_name, values, quote) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\r\n\r\nselect *\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\r\n    {% set macro = adapter.dispatch('test_not_null') %}\r\n    {{ macro(model, column_name) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\r\n\r\nselect\r\n    child.{{ column_name }}\r\n\r\nfrom {{ model }} as child\r\n\r\nleft join {{ to }} as parent\r\n    on child.{{ column_name }} = parent.{{ field }}\r\n\r\nwhere child.{{ column_name }} is not null\r\n  and parent.{{ field }} is null\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\r\n    {% set macro = adapter.dispatch('test_relationships') %}\r\n    {{ macro(model, column_name, to, field) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\r\n\r\nselect\r\n    {{ column_name }},\r\n    count(*) as n_records\r\n\r\nfrom {{ model }}\r\nwhere {{ column_name }} is not null\r\ngroup by {{ column_name }}\r\nhaving count(*) > 1\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\r\n    {% set macro = adapter.dispatch('test_unique') %}\r\n    {{ macro(model, column_name) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\accepted_range.sql", "original_file_path": "macros\\schema_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\accepted_range.sql", "original_file_path": "macros\\schema_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select {{ column_name }}\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\at_least_one.sql", "original_file_path": "macros\\schema_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\at_least_one.sql", "original_file_path": "macros\\schema_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\cardinality_equality.sql", "original_file_path": "macros\\schema_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\cardinality_equality.sql", "original_file_path": "macros\\schema_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\equality.sql", "original_file_path": "macros\\schema_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\equality.sql", "original_file_path": "macros\\schema_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, * from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, * from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\equal_rowcount.sql", "original_file_path": "macros\\schema_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\equal_rowcount.sql", "original_file_path": "macros\\schema_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\fewer_rows_than.sql", "original_file_path": "macros\\schema_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\fewer_rows_than.sql", "original_file_path": "macros\\schema_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\schema_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\not_accepted_values.sql", "original_file_path": "macros\\schema_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\not_accepted_values.sql", "original_file_path": "macros\\schema_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\not_constant.sql", "original_file_path": "macros\\schema_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\not_constant.sql", "original_file_path": "macros\\schema_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\recency.sql", "original_file_path": "macros\\schema_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\recency.sql", "original_file_path": "macros\\schema_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\relationships_where.sql", "original_file_path": "macros\\schema_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\relationships_where.sql", "original_file_path": "macros\\schema_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\sequential_values.sql", "original_file_path": "macros\\schema_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\sequential_values.sql", "original_file_path": "macros\\schema_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\test_not_null_where.sql", "original_file_path": "macros\\schema_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\test_not_null_where.sql", "original_file_path": "macros\\schema_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\test_unique_where.sql", "original_file_path": "macros\\schema_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\test_unique_where.sql", "original_file_path": "macros\\schema_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\schema_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\schema_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\schema_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.find_analyze_recommendations": {"unique_id": "macro.redshift.find_analyze_recommendations", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\compression.sql", "original_file_path": "macros\\compression.sql", "name": "find_analyze_recommendations", "macro_sql": "{% macro find_analyze_recommendations(schema, table, comprows=none) %}\n\n  {% set comprows_s = '' if comprows is none else 'comprows ' ~ comprows %}\n  {% set query %}\n    analyze compression \"{{ schema }}\".\"{{ table }}\" {{ comprows_s }}\n  {% endset %}\n\n  {% set columns = redshift.get_data(query, ['table', 'column', 'encoding', 'reduction_pct']) %}\n\n  {% set ret = {} %}\n  {% for column in columns %}\n      {%- set _ = ret.update({column.column: column}) -%}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.build_optimized_definition": {"unique_id": "macro.redshift.build_optimized_definition", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\compression.sql", "original_file_path": "macros\\compression.sql", "name": "build_optimized_definition", "macro_sql": "{% macro build_optimized_definition(definition, recommendation) -%}\n\n    {% set optimized = {} %}\n    {% set _ = optimized.update(definition) %}\n    {% for name, column in definition['columns'].items() %}\n        {% set recommended_encoding = recommendation[name] %}\n\n        {% if recommended_encoding['encoding'] != column['encoding'] %}\n            {{ log(\"    Changing \" ~ name ~ \": \" ~ column['encoding'] ~ \" -> \" ~ recommended_encoding['encoding'] ~ \" (\" ~ recommended_encoding['reduction_pct'] ~ \"%)\") }}\n        {% else %}\n            {{ log(\"Not Changing \" ~ name ~ \": \" ~ column['encoding']) }}\n        {% endif %}\n\n        {% set _ = optimized['columns'][name].update({\"encoding\": recommended_encoding['encoding']}) %}\n    {% endfor %}\n\n    {{ return(optimized) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.insert_into_sql": {"unique_id": "macro.redshift.insert_into_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\compression.sql", "original_file_path": "macros\\compression.sql", "name": "insert_into_sql", "macro_sql": "\n\n{%- macro insert_into_sql(from_schema, from_table, to_schema, to_table) -%}\n\n    insert into \"{{ to_schema }}\".\"{{ to_table }}\" (\n        select * from \"{{ from_schema }}\".\"{{ from_table }}\"\n    );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.atomic_swap_sql": {"unique_id": "macro.redshift.atomic_swap_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\compression.sql", "original_file_path": "macros\\compression.sql", "name": "atomic_swap_sql", "macro_sql": "{%- macro atomic_swap_sql(schema, from_table, to_table, drop_backup) -%}\n\n    begin;\n    -- drop table if exists \"{{ schema }}\".\"{{ from_table }}__backup\" cascade;\n    alter table \"{{ schema }}\".\"{{ from_table }}\" rename to \"{{ from_table }}__backup\";\n    alter table \"{{ schema }}\".\"{{ to_table }}\" rename to \"{{ from_table }}\";\n    {% if drop_backup %}\n        drop table \"{{ schema }}\".\"{{ from_table }}__backup\" cascade;\n    {% else %}\n        {{ log('drop_backup is False -- not dropping ' ~ from_table ~ \"__backup\") }}\n    {% endif %}\n    commit;\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.compress_table": {"unique_id": "macro.redshift.compress_table", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\compression.sql", "original_file_path": "macros\\compression.sql", "name": "compress_table", "macro_sql": "{%- macro compress_table(schema, table, drop_backup=False,\n                         comprows=none, sort_style=none, sort_keys=none,\n                         dist_style=none, dist_key=none) -%}\n\n  {% if not execute %}\n    {{ return(none) }}\n  {% endif %}\n\n  {% set recommendation = redshift.find_analyze_recommendations(schema, table, comprows) %}\n  {% set definition = redshift.fetch_table_definition(schema, table) %}\n\n  {% if definition is none %}\n    {{ return(none) }}\n  {% endif %}\n\n  {% set optimized = redshift.build_optimized_definition(definition, recommendation) %}\n\n  {% set _ = optimized.update({\"keys\": optimized.get('keys', {}) | default({})}) %}\n  {% if sort_style %} {% set _ = optimized['keys'].update({\"sort_style\": sort_style}) %} {% endif %}\n  {% if sort_keys %}  {% set _ = optimized['keys'].update({\"sort_keys\": sort_keys}) %} {% endif %}\n  {% if dist_style %} {% set _ = optimized['keys'].update({\"dist_style\": dist_style}) %} {% endif %}\n  {% if dist_key %}   {% set _ = optimized['keys'].update({\"dist_key\": dist_key}) %} {% endif %}\n\n  {% set new_table = table ~ \"__compressed\" %}\n  {% set _ = optimized.update({'name': new_table}) %}\n\n  {# Build the DDL #}\n  {{ redshift.build_ddl_sql(optimized) }}\n  {{ redshift.insert_into_sql(schema, table, schema, new_table) }}\n  {{ redshift.atomic_swap_sql(schema, table, new_table, drop_backup) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.find_analyze_recommendations", "macro.redshift.fetch_table_definition", "macro.redshift.build_optimized_definition", "macro.redshift.build_ddl_sql", "macro.redshift.insert_into_sql", "macro.redshift.atomic_swap_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.build_ddl_sql": {"unique_id": "macro.redshift.build_ddl_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\ddl.sql", "original_file_path": "macros\\ddl.sql", "name": "build_ddl_sql", "macro_sql": "{% macro build_ddl_sql(def) %}\n\n    -- DROP\n    drop table if exists \"{{ def['schema'] }}\".\"{{ def['name'] }}\";\n    -- CREATE\n    create table \"{{ def['schema'] }}\".\"{{ def['name'] }}\" (\n        -- COLUMNS\n        {% for column in def['columns'].values() | sort(attribute='position') -%}\n            \"{{ column['name'] }}\" {{ column['type'] }}\n            {%- if column['encoding'] is not none %} encode {{ column['encoding'] }} {% endif -%}\n            {%- if column['default'] is not none %} default {{ column['default'] }} {% endif -%}\n            {%- if column['not_null'] %} not null {% endif -%}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n\n        -- CONSTRAINTS\n        {% for constraint in def['constraints'] -%}\n            , {{ constraint['col_constraint'] }}\n        {% endfor %}\n    )\n\n    --KEYS\n    {% if def['keys'] %}\n        {% set dist_style = def['keys']['dist_style'] %}\n        {% set dist_key = def['keys']['dist_key'] %}\n        -- DIST\n        {% if dist_style %} diststyle {{ dist_style }} {% endif %}\n        {% if dist_key %} distkey(\"{{ dist_key }}\") {% endif %}\n\n        -- SORT\n        {% set sort_style = def['keys']['sort_style'] %}\n        {% set sort_keys = def['keys']['sort_keys'] %}\n        {% set sort_keys_s = sort_keys | join('\", \"') %}\n        {% if sort_keys %} {{ sort_style }} sortkey(\"{{ sort_keys_s }}\") {% endif %}\n    {% endif %}\n    ;\n\n    -- TABLE COMMENT\n    {% if def['description'] %}\n        comment on table \"{{ def['schema'] }}\".\"{{ def['name'] }}\" is '{{ def[\"description\"] }}';\n    {% endif %}\n\n    -- COLUMN COMMENTS\n    {% for column in def['columns'].values() -%}\n        {%- if column['description'] -%}\n            comment on column \"{{ def['schema'] }}\".\"{{ def['name'] }}\".\"{{ column['name'] }}\" is '{{ column[\"description\"] }}';\n\n        {% endif -%}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.get_data": {"unique_id": "macro.redshift.get_data", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\introspection.sql", "original_file_path": "macros\\introspection.sql", "name": "get_data", "macro_sql": "{% macro get_data(query, columns) %}\n\n  {%- call statement('_', fetch_result=True) %}\n    {{ query }}\n  {% endcall %}\n\n  {%- set records = load_result('_') -%}\n\n  {% if not records %}\n    {{ return([]) }}\n  {% endif %}\n\n  {%- set ret = [] -%}\n  {% for record in records['data'] %}\n    {% set processing = {} %}\n    {% for column in columns %}\n        {% set _ = processing.update({column: record[loop.index0]}) %}\n    {% endfor %}\n    {% set _ = ret.append(processing) %}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_table_data": {"unique_id": "macro.redshift.fetch_table_data", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\introspection.sql", "original_file_path": "macros\\introspection.sql", "name": "fetch_table_data", "macro_sql": "{% macro fetch_table_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        schemaname,\n        tablename,\n        description,\n        relation_type\n    from ({{ redshift.fetch_table_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set table = redshift.get_data(sql, ['schema', 'name', 'description', 'type']) %}\n  {{ return(table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_table_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_column_data": {"unique_id": "macro.redshift.fetch_column_data", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\introspection.sql", "original_file_path": "macros\\introspection.sql", "name": "fetch_column_data", "macro_sql": "{% macro fetch_column_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        col_index,\n        col_name,\n        description,\n        col_datatype,\n        col_encoding,\n        col_default,\n        col_not_null\n    from ({{ redshift.fetch_column_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set columns = redshift.get_data(sql, ['position', 'name', 'description', 'type', 'encoding', 'default', 'not_null']) %}\n\n  {% set ret = {} %}\n  {% for column in columns %}\n      {%- set _ = ret.update({column.name: column}) -%}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_column_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_sort_dist_key_data": {"unique_id": "macro.redshift.fetch_sort_dist_key_data", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\introspection.sql", "original_file_path": "macros\\introspection.sql", "name": "fetch_sort_dist_key_data", "macro_sql": "{% macro fetch_sort_dist_key_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        sort_style,\n        sort_keys,\n        diststyle,\n        dist_key\n    from ({{ redshift.fetch_sort_dist_key_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set keys = redshift.get_data(sql, ['sort_style', 'sort_keys', 'dist_style', 'dist_key']) %}\n  {% for key in keys %}\n    {% set _ = key.update({'sort_keys': key['sort_keys'].split('|')}) %}\n  {% endfor %}\n\n  {{ return(keys) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_sort_dist_key_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_constraints": {"unique_id": "macro.redshift.fetch_constraints", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\introspection.sql", "original_file_path": "macros\\introspection.sql", "name": "fetch_constraints", "macro_sql": "{% macro fetch_constraints(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        constraint_type,\n        col_constraint\n    from ({{ redshift.fetch_constraint_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set constraints = redshift.get_data(sql, ['constraint_type', 'col_constraint']) %}\n  {{ return(constraints) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_constraint_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_table_definition": {"unique_id": "macro.redshift.fetch_table_definition", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\introspection.sql", "original_file_path": "macros\\introspection.sql", "name": "fetch_table_definition", "macro_sql": "{% macro fetch_table_definition(schema_name, table_name) %}\n  {% set tables = redshift.fetch_table_data(schema_name, table_name) %}\n\n  {% if (tables | length) == 0 %}\n    {{ return(none) }}\n  {% elif (tables | length) > 1 %}\n    {{ log(tables) }}\n    {{ exceptions.raise_compiler_error(\"Expected one table\") }}\n  {% endif %}\n\n  {% set table = tables[0] %}\n  {% set columns = redshift.fetch_column_data(schema_name, table_name) %}\n  {% set keys = redshift.fetch_sort_dist_key_data(schema_name, table_name) | first %}\n  {% set constraints = redshift.fetch_constraints(schema_name, table_name) %}\n\n  {% set _ = table.update({\"columns\": columns}) %}\n  {% set _ = table.update({\"keys\": keys}) %}\n  {% set _ = table.update({\"constraints\": constraints}) %}\n\n  {{ return(table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_table_data", "macro.redshift.fetch_column_data", "macro.redshift.fetch_sort_dist_key_data", "macro.redshift.fetch_constraints"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_table_data_sql": {"unique_id": "macro.redshift.fetch_table_data_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\queries.sql", "original_file_path": "macros\\queries.sql", "name": "fetch_table_data_sql", "macro_sql": "{% macro fetch_table_data_sql() %}\n\n    select\n        n.nspname AS schemaname,\n        c.relname AS tablename,\n        d.description,\n        case\n            when c.relkind = 'v' then 'view'\n            when c.relkind = 'r' then 'table'\n            else null\n        end as relation_type\n\n    from pg_catalog.pg_namespace n\n    join pg_catalog.pg_class c on n.oid = c.relnamespace\n    left outer join pg_description d ON (d.objoid = c.oid AND d.objsubid = 0)\n\n    where schemaname not like 'pg_%'\n      and schemaname != 'information_schema'\n      and relkind in ('v', 'r')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_column_data_sql": {"unique_id": "macro.redshift.fetch_column_data_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\queries.sql", "original_file_path": "macros\\queries.sql", "name": "fetch_column_data_sql", "macro_sql": "{% macro fetch_column_data_sql() %}\n\n    with columns as (\n        select\n            n.nspname as schemaname,\n            c.relname as tablename,\n            a.attnum as col_index,\n            a.attname as col_name,\n            d.description,\n\n            case\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING', 'VARCHAR')\n\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER', 'CHAR')\n\n                else upper(format_type(a.atttypid, a.atttypmod))\n            end as col_datatype,\n\n            case\n                when format_encoding((a.attencodingtype)::integer) = 'none' then 'raw'\n                else format_encoding((a.attencodingtype)::integer)\n            end as col_encoding,\n\n            case\n                when a.atthasdef is true then adef.adsrc\n                else null\n            end as col_default,\n\n            a.attnotnull as col_not_null\n\n        from pg_namespace as n\n        inner join pg_class as c on n.oid = c.relnamespace\n        inner join pg_attribute as a on c.oid = a.attrelid\n        left outer join pg_description as d ON (d.objoid = a.attrelid AND d.objsubid = a.attnum)\n        left outer join pg_attrdef as adef on a.attrelid = adef.adrelid and a.attnum = adef.adnum\n        where c.relkind = 'r'\n          and a.attnum > 0\n\n    )\n    select *\n    from columns\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_constraint_data_sql": {"unique_id": "macro.redshift.fetch_constraint_data_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\queries.sql", "original_file_path": "macros\\queries.sql", "name": "fetch_constraint_data_sql", "macro_sql": "{% macro fetch_constraint_data_sql() %}\n\n    select\n        c.nspname as schemaname,\n        b.relname as tablename,\n        case\n            when a.contype = 'p' then 'primary key'\n            when a.contype = 'u' then 'unique'\n            when a.contype = 'f' then 'foreign key'\n            else null\n        end as constraint_type,\n        pg_get_constraintdef(a.oid) as col_constraint\n\n    from pg_catalog.pg_constraint a\n    join pg_catalog.pg_class b on(a.conrelid=b.oid)\n    join pg_catalog.pg_namespace c on(a.connamespace=c.oid)\n    where a.contype in ('p', 'u', 'f')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.fetch_sort_dist_key_data_sql": {"unique_id": "macro.redshift.fetch_sort_dist_key_data_sql", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\queries.sql", "original_file_path": "macros\\queries.sql", "name": "fetch_sort_dist_key_data_sql", "macro_sql": "{% macro fetch_sort_dist_key_data_sql() %}\n\n    with dist_config as (\n\n        -- gets distyle and distkey (if there is one)\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n\n            case\n                when c.reldiststyle = 0 then 'even'\n                when c.reldiststyle = 1 then 'key'\n                when c.reldiststyle = 8 then 'all'\n                else null\n            end as diststyle,\n\n            max(case when c.reldiststyle = 1 and a.attisdistkey IS TRUE and a.attnum > 0 then a.attname else null end) over (partition by n.nspname, c.relname) as dist_key\n\n        from pg_namespace as n\n        inner join pg_class as c on n.oid = c.relnamespace\n        inner join pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n\n    ),\n\n    sort_config as (\n\n        -- get sortstyle and sortkeys\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n            case\n                when min(a.attsortkeyord) over (partition by n.nspname, c.relname) = -1 then 'interleaved'\n                else 'compound'\n            end as sort_style,\n            listagg(a.attname, '|') within group (order by a.attsortkeyord) over (partition by n.nspname, c.relname) as sort_keys\n\n        from  pg_namespace as n\n        inner join pg_class as c on n.oid = c.relnamespace\n        inner join pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n          and abs(a.attsortkeyord) > 0\n          and a.attnum > 0\n    )\n\n    select *\n    from sort_config\n    join dist_config using (schemaname, tablename)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.get_vacuumable_tables": {"unique_id": "macro.redshift.get_vacuumable_tables", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\redshift_maintenance_operation.sql", "original_file_path": "macros\\redshift_maintenance_operation.sql", "name": "get_vacuumable_tables", "macro_sql": "{% macro get_vacuumable_tables() %}\n    {% set vacuumable_tables_sql %}\n        select\n            '\"' || table_schema || '\".\"' || table_name || '\"' as table_name\n        from information_schema.tables\n        where table_type = 'BASE TABLE'\n            and table_schema not in ('information_schema', 'pg_catalog')\n        order by table_schema, table_name\n    {% endset %}\n    {% set vacuumable_tables=run_query(vacuumable_tables_sql) %}\n    {{ return(vacuumable_tables.columns[0].values()) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.redshift_maintenance": {"unique_id": "macro.redshift.redshift_maintenance", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\redshift_maintenance_operation.sql", "original_file_path": "macros\\redshift_maintenance_operation.sql", "name": "redshift_maintenance", "macro_sql": "{% macro redshift_maintenance() %}\n\n    {% for table in get_vacuumable_tables() %}\n        {% set start=modules.datetime.datetime.now() %}\n        {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n        {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n        {% do run_query(\"vacuum \" ~ table) %}\n        {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n        {% do run_query(\"analyze \" ~ table) %}\n        {% set end=modules.datetime.datetime.now() %}\n        {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n        {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.get_vacuumable_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.try_cast": {"unique_id": "macro.redshift.try_cast", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\try_cast.sql", "original_file_path": "macros\\try_cast.sql", "name": "try_cast", "macro_sql": "{%- macro try_cast(str, datatype) -%}\n\n{%- if datatype == 'bigint' or datatype == 'int' -%}\n\n    case\n        when trim({{str}}) ~ '^[0-9]+$' then trim({{str}})\n        else null\n    end::{{datatype}}\n\n{% else %}\n\n    {{ exceptions.raise_compiler_error(\n            \"non-integer datatypes are not currently supported\") }}\n\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.unload_table": {"unique_id": "macro.redshift.unload_table", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\unload.sql", "original_file_path": "macros\\unload.sql", "name": "unload_table", "macro_sql": "{% macro unload_table(schema,\n                table,\n                s3_path,\n                iam_role=None,\n                aws_key=None,\n                aws_secret=None,\n                aws_region=None,\n                manifest=False,\n                header=False,\n                format=None,\n                delimiter=\",\",\n                null_as=\"\",\n                max_file_size='6 GB',\n                escape=True,\n                compression=None,\n                add_quotes=False,\n                encrypted=False,\n                overwrite=False,\n                parallel=False) %}\n\n  -- compile UNLOAD statement\n  UNLOAD ('SELECT * FROM \"{{ schema }}\".\"{{ table }}\"')\n  TO '{{ s3_path }}'\n  {% if iam_role %}\n  IAM_ROLE '{{ iam_role }}'\n  {% elif aws_key and aws_secret %}\n  ACCESS_KEY_ID '{{ aws_key }}'\n  SECRET_ACCESS_KEY '{{ aws_secret }}'\n  {% else %}\n  -- Raise an error if authorization args are not present\n  {{ exceptions.raise_compiler_error(\"You must provide AWS authorization parameters via 'iam_role' or 'aws_key' and 'aws_secret'.\") }}\n  {% endif %}\n  {% if manifest %}\n  MANIFEST\n  {% endif %}\n  {% if header %}\n  HEADER\n  {% endif %}\n  {% if format %}\n  FORMAT AS {{format|upper}}\n  {% endif %}\n  {% if not format %}\n  DELIMITER AS '{{ delimiter }}'\n  {% endif %}\n  NULL AS '{{ null_as }}'\n  MAXFILESIZE AS {{ max_file_size }}\n  {% if escape %}\n  ESCAPE\n  {% endif %}\n  {% if compression %}\n  {{ compression|upper }}\n  {% endif %}\n  {% if add_quotes %}\n  ADDQUOTES\n  {% endif %}\n  {% if encrypted %}\n  ENCRYPTED\n  {% endif %}\n  {% if overwrite %}\n  ALLOWOVERWRITE\n  {% endif %}\n  {% if not parallel %}\n  PARALLEL OFF\n  {% endif %}\n  {% if aws_region %}\n  REGION '{{ aws_region }}'\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.decode_reldiststyle": {"unique_id": "macro.redshift.decode_reldiststyle", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\utilities.sql", "original_file_path": "macros\\utilities.sql", "name": "decode_reldiststyle", "macro_sql": "{% macro decode_reldiststyle(diststyle_field, distkey_field) -%}\n  decode({{diststyle_field}}, 0, 'even',\n                              1, {{distkey_field}},\n                              'all')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}, "macro.redshift.percentage": {"unique_id": "macro.redshift.percentage", "package_name": "redshift", "root_path": "C:\\Users\\urvas\\dbt-project\\dbt-demo\\dbt-demo\\dbt_modules\\redshift", "path": "macros\\utilities.sql", "original_file_path": "macros\\utilities.sql", "name": "percentage", "macro_sql": "{% macro percentage(num, denom) -%}\n  (case {{denom}}\n        when 0 then 0\n        else ({{num}}::float / {{denom}}::float) * 100.0 end)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1625759746}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\users\\urvas\\dbt-project\\dbt-env\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\r\n\r\nWelcome to the auto-generated documentation for your dbt project!\r\n\r\n### Navigation\r\n\r\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\r\nin your project.\r\n\r\n#### Project Tab\r\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\r\nmodels defined in your dbt project, as well as models imported from dbt packages.\r\n\r\n#### Database Tab\r\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\r\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\r\nin this interface, as they do not exist in the database.\r\n\r\n### Graph Exploration\r\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\r\n\r\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\r\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\r\nor are built from, the model you're exploring.\r\n\r\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\r\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\r\n\r\nNote that you can also right-click on models to interactively filter and explore the graph.\r\n\r\n---\r\n\r\n### More information\r\n\r\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\r\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\r\n- [Installation](https://docs.getdbt.com/docs/installation)\r\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.my_new_project.musicals_info": [], "model.my_new_project.my_first_dbt_model": [], "model.my_new_project.my_second_dbt_model": ["model.my_new_project.my_first_dbt_model"], "model.redshift.pg_attribute": [], "model.redshift.pg_class": [], "model.redshift.pg_depend": [], "model.redshift.pg_namespace": [], "model.redshift.pg_tables": [], "model.redshift.pg_user": [], "model.redshift.pg_views": [], "model.redshift.redshift_cost": ["model.redshift.stl_explain"], "model.redshift.stl_explain": [], "model.redshift.stl_query": [], "model.redshift.stl_wlm_query": [], "model.redshift.stv_blocklist": [], "model.redshift.stv_tbl_perm": [], "model.redshift.svv_diskusage": [], "model.redshift.redshift_columns": [], "model.redshift.redshift_constraints": [], "model.redshift.redshift_sort_dist_keys": [], "model.redshift.redshift_tables": [], "model.redshift.redshift_admin_dependencies": ["model.redshift.pg_class", "model.redshift.pg_class", "model.redshift.pg_depend", "model.redshift.pg_depend", "model.redshift.pg_namespace", "model.redshift.pg_namespace"], "model.redshift.redshift_admin_queries": ["model.redshift.pg_user", "model.redshift.redshift_cost", "model.redshift.stl_query", "model.redshift.stl_wlm_query"], "model.redshift.redshift_admin_table_stats": ["model.redshift.pg_attribute", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.stv_blocklist", "model.redshift.stv_tbl_perm", "model.redshift.svv_diskusage"], "model.redshift.redshift_admin_users_schema_privileges": ["model.redshift.pg_tables", "model.redshift.pg_user", "model.redshift.pg_views"], "model.redshift.redshift_admin_users_table_view_privileges": ["model.redshift.pg_tables", "model.redshift.pg_user", "model.redshift.pg_views"], "test.my_new_project.unique_my_first_dbt_model_id.5ef3c774bb": ["model.my_new_project.my_first_dbt_model"], "test.my_new_project.not_null_my_first_dbt_model_id.f479667b44": ["model.my_new_project.my_first_dbt_model"], "test.my_new_project.unique_my_second_dbt_model_id.bc96125570": ["model.my_new_project.my_second_dbt_model"], "test.my_new_project.not_null_my_second_dbt_model_id.dc1d13aa6d": ["model.my_new_project.my_second_dbt_model"]}, "child_map": {"model.my_new_project.musicals_info": [], "model.my_new_project.my_first_dbt_model": ["model.my_new_project.my_second_dbt_model", "test.my_new_project.not_null_my_first_dbt_model_id.f479667b44", "test.my_new_project.unique_my_first_dbt_model_id.5ef3c774bb"], "model.my_new_project.my_second_dbt_model": ["test.my_new_project.not_null_my_second_dbt_model_id.dc1d13aa6d", "test.my_new_project.unique_my_second_dbt_model_id.bc96125570"], "model.redshift.pg_attribute": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_class": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_table_stats"], "model.redshift.pg_depend": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_dependencies"], "model.redshift.pg_namespace": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_table_stats"], "model.redshift.pg_tables": ["model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.pg_user": ["model.redshift.redshift_admin_queries", "model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.pg_views": ["model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.redshift_cost": ["model.redshift.redshift_admin_queries"], "model.redshift.stl_explain": ["model.redshift.redshift_cost"], "model.redshift.stl_query": ["model.redshift.redshift_admin_queries"], "model.redshift.stl_wlm_query": ["model.redshift.redshift_admin_queries"], "model.redshift.stv_blocklist": ["model.redshift.redshift_admin_table_stats"], "model.redshift.stv_tbl_perm": ["model.redshift.redshift_admin_table_stats"], "model.redshift.svv_diskusage": ["model.redshift.redshift_admin_table_stats"], "model.redshift.redshift_columns": [], "model.redshift.redshift_constraints": [], "model.redshift.redshift_sort_dist_keys": [], "model.redshift.redshift_tables": [], "model.redshift.redshift_admin_dependencies": [], "model.redshift.redshift_admin_queries": [], "model.redshift.redshift_admin_table_stats": [], "model.redshift.redshift_admin_users_schema_privileges": [], "model.redshift.redshift_admin_users_table_view_privileges": [], "test.my_new_project.unique_my_first_dbt_model_id.5ef3c774bb": [], "test.my_new_project.not_null_my_first_dbt_model_id.f479667b44": [], "test.my_new_project.unique_my_second_dbt_model_id.bc96125570": [], "test.my_new_project.not_null_my_second_dbt_model_id.dc1d13aa6d": []}}